#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.0 on Mon Oct 21 11:47:14 2019
#

'''
Copyright (C) 2020

Author: Megat Harun Al Rashid bin Megat Ahmad
Affiliate: Agensi Nuklear Malaysia

This program is free software; you can redistribute it
and/or modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; version 2.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software Foundation,
Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
'''


import wx
import wx.grid

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
import numpy as np
import wx.py.shell
import plotWorkGamma1


class MyPythonConsole(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_1 = wx.Panel(self, wx.ID_ANY)
        
        self.shell = wx.py.shell.Shell(self.panel_1, wx.ID_ANY, introText = "Interactive Python")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("Interactive Python Shell")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(self.shell, 1, wx.EXPAND, 0)
        self.panel_1.SetSizer(sizer_2)
        sizer_1.Add(self.panel_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        self.SetSize((500, 500))
        # end wxGlade

class MyDialogAbout(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((400, 300))

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyDialog.__set_properties
        self.SetTitle("About")
        self.SetSize((400, 300))
        self.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyDialog.__do_layout
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        label_1 = wx.StaticText(self, wx.ID_ANY, "\nOmbakWarna\n\nCopyright 2019\nAgensi Nuklear Malaysia\n\nAuthor:\nMegat Harun Al Rashid bin Megat Ahmad\n\nLicence: GPL v2\n\n", style=wx.ALIGN_CENTER)
        label_1.SetMinSize((400, 300))
        sizer_7.Add(label_1, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.EXPAND, 0)
        self.SetSizer(sizer_7)
        self.Layout()
        self.Centre()
# end wxGlade


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE | wx.ICONIZE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((600, 600))
        
        #Add grid control
        self.gridCtr = 0 # To manage multiple grids
        self.gridNo = [] # To manage multiple grids #NEWLY ADD
        self.gridDict = {} # To manage multiple grids
        self.ctrData = 0 # Not use yet

        self.gridDictData = {} # Not use yet
        self.gridDictData['sheet 0']={} # Initial data

        #End grid control
        
        #Add plot control
        self.plotCtr = 0
        self.plotDict = {}
        #End plot control
        
        # Menu Bar
        self.frame_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Open", "")
        self.Bind(wx.EVT_MENU, self.openExistingFile, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Exit", "")
        self.Bind(wx.EVT_MENU, self.exitProgram, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, "File")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Import Data", "")
        self.Bind(wx.EVT_MENU, self.importData, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Add Spreadsheet", "")
        self.Bind(wx.EVT_MENU, self.addSheet, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Remove Spreadsheet", "")
        self.Bind(wx.EVT_MENU, self.deleteSheet, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Interactive Python Console", "")
        self.Bind(wx.EVT_MENU, self.pythonShell, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Create Array", "")
        self.Bind(wx.EVT_MENU, self.createArray, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, "Data")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "About", "")
        self.Bind(wx.EVT_MENU, self.about, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, "Help")
        self.SetMenuBar(self.frame_menubar)
        # Menu Bar end
        
        # Tool Bar
        self.frame_toolbar = wx.ToolBar(self, -1)
        self.SetToolBar(self.frame_toolbar)
        self.frame_toolbar.AddTool(1001, "New Document", wx.Bitmap("IconsImage/newDocument.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "New Document", "")
        self.frame_toolbar.AddTool(1002, "Open Document", wx.Bitmap("IconsImage/openDocument.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Open Document", "")
        self.frame_toolbar.AddTool(1003, "Save As", wx.Bitmap("IconsImage/saveAs.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Save As", "")
        self.frame_toolbar.AddTool(1004, "Save", wx.Bitmap("IconsImage/save.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Save", "")
        self.frame_toolbar.AddSeparator()
        self.frame_toolbar.AddTool(2001, "Import Data", wx.Bitmap("IconsImage/importData.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Import Data", "")
        self.frame_toolbar.AddTool(2002, "Python Console", wx.Bitmap("IconsImage/console.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Interactive Python Console", "")
        self.frame_toolbar.AddSeparator()
        self.frame_toolbar.AddTool(3001, "Line Plot", wx.Bitmap("IconsImage/lineChart.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Line Plot", "")
        self.frame_toolbar.AddTool(3002, "Bar Chart", wx.Bitmap("IconsImage/barChart.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Bar Chart", "")
        self.frame_toolbar.AddTool(3003, "Pie Chart", wx.Bitmap("IconsImage/pieChart.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Pie Chart", "")
        self.frame_toolbar.AddTool(3004, "Image Plot", wx.Bitmap("IconsImage/imagePlot.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Image Plot", "")
        self.frame_toolbar.AddSeparator()
        self.frame_toolbar.AddTool(4001, "Add Column", wx.Bitmap("IconsImage/addColumn.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Add Column", "")
        self.frame_toolbar.AddTool(4002, "Remove Column", wx.Bitmap("IconsImage/deleteColumn.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Remove Column", "")
        self.frame_toolbar.AddTool(4003, "Insert Column to the Left", wx.Bitmap("IconsImage/insertColumnLeft.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Insert Column to the Left", "")
        self.frame_toolbar.AddTool(4004, "Insert Column to the Right", wx.Bitmap("IconsImage/insertColumnRight.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Insert Column to the Right", "")
        self.frame_toolbar.AddSeparator()
        self.frame_toolbar.AddTool(5001, "Add Row", wx.Bitmap("IconsImage/addRow.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Add Row", "")
        self.frame_toolbar.AddTool(5002, "Remove Row", wx.Bitmap("IconsImage/deleteRow.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Remove Row", "")
        self.frame_toolbar.AddTool(5003, "Insert Row at the Above", wx.Bitmap("IconsImage/insertRowAbove.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Insert Row at the Above", "")
        self.frame_toolbar.AddTool(5004, "Insert Row at the Below", wx.Bitmap("IconsImage/insertRowBelow.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Insert Row at the Below", "")
        # Tool Bar end
        self.nb1 = wx.Notebook(self, wx.ID_ANY)
        self.hamparan1 = wx.Panel(self.nb1, wx.ID_ANY)
        self.grid_1 = wx.grid.Grid(self.hamparan1, wx.ID_ANY, size=(1, 1))
        self.gridDict.update({self.gridCtr: self.grid_1})
        self.gridNo.append(self.gridCtr)
        self.grid_1.Bind(wx.grid.EVT_GRID_SELECT_CELL, self.onSingleSelect)
        self.grid_1.Bind(wx.grid.EVT_GRID_RANGE_SELECT, self.onDragSelection)
        self.nb2 = wx.Notebook(self, wx.ID_ANY)
        self.nb2p1 = wx.Panel(self.nb2, wx.ID_ANY)
        self.text_ctrl_1 = wx.TextCtrl(self.nb2p1, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        self.nb2p2 = wx.Panel(self.nb2, wx.ID_ANY)
        self.text_ctrl_2 = wx.TextCtrl(self.nb2p2, wx.ID_ANY, "", style=wx.TE_MULTILINE)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TOOL, self.importData, id=2001)
        self.Bind(wx.EVT_TOOL, self.pythonShell, id=2002)
        self.Bind(wx.EVT_TOOL, self.linePlot, id=3001)
        self.Bind(wx.EVT_TOOL, self.barChart, id=3002)
        self.Bind(wx.EVT_TOOL, self.pieChart, id=3003)
        self.Bind(wx.EVT_TOOL, self.imagePlot, id=3004)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("OmbakWarna")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("IconsImage/colorWaveIcon.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.frame_toolbar.SetToolSeparation(2)
        self.frame_toolbar.Realize()
        self.grid_1.CreateGrid(21, 8)
        self.nb1.SetMinSize((100, 100))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        self.sizer_main = wx.BoxSizer(wx.VERTICAL)
        sizer_split_half = wx.BoxSizer(wx.VERTICAL)
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_sistem = wx.BoxSizer(wx.VERTICAL)
        sizer_aktiviti = wx.BoxSizer(wx.VERTICAL)
        self.sizer_spreadsheet = wx.BoxSizer(wx.VERTICAL)
        sizer_grid1 = wx.BoxSizer(wx.VERTICAL)
        sizer_grid1.Add(self.grid_1, 1, wx.EXPAND, 0)
        self.hamparan1.SetSizer(sizer_grid1)
        self.nb1.AddPage(self.hamparan1, "sheet 0")
        self.sizer_spreadsheet.Add(self.nb1, 1, wx.EXPAND, 0)
        sizer_split_half.Add(self.sizer_spreadsheet, 3, wx.EXPAND, 0)
        sizer_aktiviti.Add(self.text_ctrl_1, 1, wx.ALIGN_CENTER | wx.ALL | wx.EXPAND, 3)
        self.nb2p1.SetSizer(sizer_aktiviti)
        sizer_sistem.Add(self.text_ctrl_2, 1, wx.ALIGN_CENTER | wx.ALL | wx.EXPAND, 3)
        self.nb2p2.SetSizer(sizer_sistem)
        self.nb2.AddPage(self.nb2p1, "Activity")
        self.nb2.AddPage(self.nb2p2, "System")
        sizer_1.Add(self.nb2, 1, wx.ALL | wx.EXPAND, 1)
        sizer_split_half.Add(sizer_1, 1, wx.EXPAND, 0)
        self.sizer_main.Add(sizer_split_half, 1, wx.EXPAND, 0)
        self.SetSizer(self.sizer_main)
        self.Layout()
        self.Centre()
        # end wxGlade

    def openExistingFile(self, event):  #  wxGlade: MyFrame.<event_handler>
        print ("Event handler 'openExistingFile' not implemented!")
        event.Skip()

    def exitProgram(self, event):  # Tutup program
        self.Close()
        event.Skip()

    def importData(self, event):  # wxGlade: MyFrame.<event_handler>
        
        frame = wx.Frame(None, -1, 'win.py')
        frame.SetSize(0,0,200,50)
 
        # Create open file dialog

        openFileDialog = wx.FileDialog(frame, "Open", "", "","All files |*.* | Text files (*.txt)|*.txt| CSV files (*.csv)|*.csv",
                                       wx.FD_OPEN | wx.FD_FILE_MUST_EXIST | wx.FD_MULTIPLE)
 
        openFileDialog.ShowModal()

        fh = open(openFileDialog.GetPath())
        fr = fh.readlines()
        fh.close()


        openFileDialog.Destroy()
        frame.Close()

        dataPlot = []
        for i,j in enumerate(fr):
            tempData = j.replace('\n','').split(',')

            dataPlot = dataPlot + [tempData] # a 2D list

        # Use list
        self.gridCtr = self.gridCtr+1
        self.gridNo.append(self.gridCtr) # NEWLY ADD
                
        hamparan = wx.Panel(self.nb1, wx.ID_ANY)
        grid_0 = wx.grid.Grid(hamparan, wx.ID_ANY, size=(1, 1))
        grid_0.CreateGrid(len(dataPlot), len(dataPlot[0]))

        sizer_grid = wx.BoxSizer(wx.VERTICAL)
        sizer_grid.Add(grid_0, 1, wx.EXPAND, 0)

        hamparan.SetSizer(sizer_grid)

        self.nb1.AddPage(hamparan, "sheet "+str(self.gridCtr))
        # Add empty dictionary to contain data for new sheet
        self.gridDictData["sheet "+str(self.gridCtr)]={} 

        self.gridDict.update({self.gridCtr: grid_0})

        for row in range(len(dataPlot)):
            for col in range(len(dataPlot[0])):
                grid_0.SetCellValue(row, col, dataPlot[row][col])
        
        grid_0.Bind(wx.grid.EVT_GRID_SELECT_CELL, self.onSingleSelect)
        grid_0.Bind(wx.grid.EVT_GRID_RANGE_SELECT, self.onDragSelection)

        event.Skip()

    def addSheet(self, event):  # Tambah helaian
        '''Adding new sheet'''
        # Use list
        self.gridCtr = self.gridCtr+1
        self.gridNo.append(self.gridCtr) # NEWLY ADD
                
        hamparan = wx.Panel(self.nb1, wx.ID_ANY)
        grid_0 = wx.grid.Grid(hamparan, wx.ID_ANY, size=(1, 1))
        grid_0.CreateGrid(51, 10)

        sizer_grid = wx.BoxSizer(wx.VERTICAL)
        sizer_grid.Add(grid_0, 1, wx.EXPAND, 0)

        hamparan.SetSizer(sizer_grid)

        self.nb1.AddPage(hamparan, "sheet "+str(self.gridCtr))
        # Add empty dictionary to contain data for new sheet
        self.gridDictData["sheet "+str(self.gridCtr)]={} 

        self.gridDict.update({self.gridCtr: grid_0})
        
        grid_0.Bind(wx.grid.EVT_GRID_SELECT_CELL, self.onSingleSelect)
        grid_0.Bind(wx.grid.EVT_GRID_RANGE_SELECT, self.onDragSelection)

        event.Skip()

    def deleteSheet(self, event): # Hapus helaian
        a = self.nb1.GetSelection()

        self.nb1.DeletePage(a)
        self.gridNo.pop(a)

        event.Skip()    

    def pythonShell(self, event):  # Kerangka Python
        MyPythonConsole(None, wx.ID_ANY, "").Show()
        return True
        event.Skip()

    def createArray(self, event):  # wxGlade: MyFrame.<event_handler>
        """
        Gets the cells that are selected by holding the left
        mouse button down and dragging
        """
        colY = []
        # Check this part for proper commenting
        b = self.gridNo[self.nb1.GetSelection()]

        if self.gridDict[b].GetSelectionBlockTopLeft():
            top_left = self.gridDict[b].GetSelectionBlockTopLeft()[0]
            bottom_right = self.gridDict[b].GetSelectionBlockBottomRight()[0]

        for col in range(top_left[1],bottom_right[1]+1,1):
            colName = self.gridDict[b].GetColLabelValue(col)
            firstRow = top_left[0]
            lastRow = bottom_right[0]

            for row in range(firstRow,lastRow+1,1):
                cellStr = self.gridDict[b].GetCellValue(row,col)
                colY.append(cellStr)

            colY = np.array(colY)

            try:
                colY = colY.astype('float')
            except:
                pass
                
            arrayKeyName = colName+str(firstRow+1)+' to '+colName+str(lastRow+1)

            self.gridDictData['sheet '+str(b)][arrayKeyName] = colY
            colY = []

    def listOfArrays(self, event):  # wxGlade: MyFrame.<event_handler>
        plotWorkGamma1Okay("EvenSBt handler 'listOfArrays' not implemented!")
        event.Skip()        

    def about(self, event):  # Tentang
        MyDialogAbout(None, wx.ID_ANY, "").Show()
        return True
        event.Skip()

    def linePlot(self, event):  # Plot garis

        # Use list
        self.plotCtr = self.plotCtr+1
        
        # EDIT HERE
        self.dataLine = plotWorkGamma1.MyFramePlot(None, wx.ID_ANY, "")

        plotWorkGamma1.receiveData(self.gridDictData) #ADD

        self.plotDict.update({self.plotCtr: self.dataLine})
        self.plotDict[self.plotCtr].Show()
        self.dataLine.Show()

        return True
        event.Skip()

    def barChart(self, event):  # wxGlade: MyFrame.<event_handler>
        plotWorkGamma1Okay("Event handler 'barChart' not implemented!")
        event.Skip()

    def pieChart(self, event):  # wxGlade: MyFrame.<event_handler>
        plotWorkGamma1Okay("Event handler 'pieChart' not implemented!")
        event.Skip()

    def imagePlot(self, event):  # wxGlade: MyFrame.<event_handler>
        plotWorkGamma1Okay("Event handler 'imagePlot' not implemented!")
        event.Skip()

    # Method codes inserted - start
    def onSingleSelect(self, event): # Panel aktiviti
        """
        Get the selection of a single cell by clicking or 
        moving the selection with the arrow keys
        """
        b = self.nb1.GetSelection()

        c = self.gridNo[b]

        cellChosen = "Row %s and column %s selected\n" % (event.GetRow()+1,event.GetCol()+1)
        cellString = self.gridDict[b].GetCellValue(event.GetRow(),event.GetCol())
        self.currentlySelectedCell = (event.GetRow()+1,event.GetCol()+1)
        self.text_ctrl_1.WriteText(cellChosen+'->"'+cellString+'"\n')
        event.Skip()

    def onDragSelection(self, event): # Drag aktiviti
        """
        Gets the cells that are selected by holding the left
        mouse button down and dragging
        """
        b = self.gridNo[self.nb1.GetSelection()]

        if self.gridDict[b].GetSelectionBlockTopLeft():
            top_left = self.gridDict[b].GetSelectionBlockTopLeft()[0]
            bottom_right = self.gridDict[b].GetSelectionBlockBottomRight()[0]
            
            cellSelected = "Cells range from (%s,%s) to (%s,%s) selected\n" % \
            (top_left[0]+1,top_left[1]+1,bottom_right[0]+1,bottom_right[1]+1)
            self.text_ctrl_1.WriteText(cellSelected)
            event.Skip()

            x = []; y = []
            
            for rowLength in range(bottom_right[0]-top_left[0]+1):
                x = x + [self.gridDict[b].GetCellValue(rowLength+top_left[0], top_left[1])]
                y = y + [self.gridDict[b].GetCellValue(rowLength+top_left[0], bottom_right[1])]
            
        event.Skip()
        # Method codes - end

# end of class MyFrame

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
