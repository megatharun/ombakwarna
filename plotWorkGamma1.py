#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.4 on Tue Dec 24 15:56:54 2019
#

'''
Copyright (C) 2020

Author: Megat Harun Al Rashid bin Megat Ahmad
Affiliate: Agensi Nuklear Malaysia

This program is free software; you can redistribute it
and/or modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; version 2.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software Foundation,
Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
'''

import wx

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
from matplotlib.backends.backend_wx import NavigationToolbar2Wx as NavigationToolbar
from matplotlib.figure import Figure
import matplotlib.gridspec as gridspec # ADD
from pubsub import pub

# Code for additional class
class receiveData:

    def __init__(self, message):
        self.message = message
        pub.sendMessage("dataForPlot", data = self.message)
        # End
# end wxGlade


class MyFramePlot(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFramePlot.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1200, 800))
        
        # Add code line
        self.bdrSpines = ['left','right','top','bottom'] # Spines control
        # Add plot number control
        self.ax = {}
        self.axShow = {}
        self.plotNoList = [] # To append number of plots
        self.plotList = {} # To control plots on/off and other display

        self.plotLegendList = {} # To control legend display

        self.plotFillList = {} # To control filled plots alpha control
        self.plotFillColorList = {} # To control filled plots alpha control

        self.plotErrorList = {} # To control filled plots alpha control
        self.plotErrorColorList = {} # To control filled plots alpha control        

        self.spineName = ['top','bottom','right','left']

        self.markerList = ["point", "pixel", "circle", "triangle_down", \
        "triangle_up", "triangle_left", "triangle_right", "tri_down", \
        "tri_up", "tri_left", "tri_right", "octagon", "square", \
        "pentagon", "star", "hexagon1", "hexagon2", "plus", "x", \
        "diamond", "thin_diamond", "vline", "hline", "tickleft", \
        "tickright", "tickup", "tickdown", "caretleft", "caretright", \
        "caretup", "caretdown", "None"]

        self.markerDict = {"point":'.', "pixel":',', "circle":'o',\
        "triangle_down":'v', "triangle_up":'^', "triangle_left":'<',\
        "triangle_right":'>', "tri_down":'1', "tri_up":'2',\
        "tri_left":'3', "tri_right":'4', "octagon":'8', "square":'s', \
        "pentagon":'p', "star":'*', "hexagon1":'h', "hexagon2":'H',\
        "plus":'+', "x":'x', "diamond":'D', "thin_diamond":'d',\
        "vline":'|', "hline":'_', "tickleft":0,\
        "tickright":1, "tickup":2,\
        "tickdown":3, "caretleft":4,\
        "caretright":5, "caretup":6,\
        "caretdown":7, "None":''}

        # End plot number control

        pub.subscribe(self.dataAndPlot, "dataForPlot")
        self.figure = Figure(figsize=(8,6), dpi=100)
        self.canvas = FigureCanvas(self,-1, self.figure)
        self.toolbar = NavigationToolbar(self.canvas)
        self.toolbar.Hide()
        # End
        
        # Menu Bar
        self.frame_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        self.frame_menubar.Append(wxglade_tmp_menu, "Save")
        wxglade_tmp_menu = wx.Menu()
        self.frame_menubar.Append(wxglade_tmp_menu, "Properties")
        self.SetMenuBar(self.frame_menubar)
        # Menu Bar end
        self.panel_toolbarTop = wx.Panel(self, wx.ID_ANY)
        self.home = wx.BitmapButton(self, wx.ID_ANY, wx.Bitmap("IconsImage/Plot/home.png", wx.BITMAP_TYPE_ANY))
        self.backward = wx.BitmapButton(self, wx.ID_ANY, wx.Bitmap("IconsImage/Plot/backward.png", wx.BITMAP_TYPE_ANY))
        self.forward = wx.BitmapButton(self, wx.ID_ANY, wx.Bitmap("IconsImage/Plot/forward.png", wx.BITMAP_TYPE_ANY))
        self.pan = wx.BitmapButton(self, wx.ID_ANY, wx.Bitmap("IconsImage/Plot/move.png", wx.BITMAP_TYPE_ANY))
        self.zoom = wx.BitmapButton(self, wx.ID_ANY, wx.Bitmap("IconsImage/Plot/zoom.png", wx.BITMAP_TYPE_ANY))
        self.save = wx.BitmapButton(self, wx.ID_ANY, wx.Bitmap("IconsImage/Plot/save.png", wx.BITMAP_TYPE_ANY))
        self.panel_toolbarBottom = wx.Panel(self, wx.ID_ANY)
        self.notebook_1 = wx.Notebook(self, wx.ID_ANY)
        self.frameTab = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.wgt_topFrameMargin = wx.Slider(self.frameTab, wx.ID_ANY, 0, 0, 100)
        self.wgt_leftFrameMargin = wx.Slider(self.frameTab, wx.ID_ANY, 0, 0, 100)
        self.wgt_rightFrameMargin = wx.Slider(self.frameTab, wx.ID_ANY, 0, 0, 100)
        self.wgt_bottomFrameMargin = wx.Slider(self.frameTab, wx.ID_ANY, 0, 0, 100)
        self.wgt_horizontalWidthFrameMargin = wx.Slider(self.frameTab, wx.ID_ANY, 0, 0, 100)
        self.wgt_verticalWidthFrameMargin = wx.Slider(self.frameTab, wx.ID_ANY, 0, 0, 100)
        self.wgt_colorFrameBackground = wx.Button(self.frameTab, wx.ID_ANY, "")
        self.wgt_alphaFrameBackground = wx.Slider(self.frameTab, wx.ID_ANY, 100, 0, 100)
        self.panel_frame = wx.Panel(self.frameTab, wx.ID_ANY)
        self.graphTab = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.wgt_graphGridArrayRow = wx.TextCtrl(self.graphTab, wx.ID_ANY, "1", style=wx.TE_CENTRE)
        self.wgt_graphGridArrayCol = wx.TextCtrl(self.graphTab, wx.ID_ANY, "1", style=wx.TE_CENTRE)
        self.wgt_graphWidthRatio = wx.TextCtrl(self.graphTab, wx.ID_ANY, ":", style=wx.TE_CENTRE)
        self.wgt_graphHeightRatio = wx.TextCtrl(self.graphTab, wx.ID_ANY, ":", style=wx.TE_CENTRE)
        self.wgt_graphPlotNo = wx.ComboBox(self.graphTab, wx.ID_ANY, choices=["1"], style=wx.CB_DROPDOWN)
        self.wgt_graphPlotNoAdd = wx.Button(self.graphTab, wx.ID_ANY, "add")
        self.wgt_graphPlotNoRemove = wx.Button(self.graphTab, wx.ID_ANY, "remove")
        self.wgt_graphCoordRow = wx.TextCtrl(self.graphTab, wx.ID_ANY, ":", style=wx.TE_CENTRE)
        self.wgt_graphCoordCol = wx.TextCtrl(self.graphTab, wx.ID_ANY, ":", style=wx.TE_CENTRE)
        self.graphNotebook = wx.Notebook(self.graphTab, wx.ID_ANY)
        self.axes = wx.Panel(self.graphNotebook, wx.ID_ANY)
        self.wgt_graphAxesSpine = wx.ComboBox(self.axes, wx.ID_ANY, choices=["x", "y", "y2", "all"], style=wx.CB_DROPDOWN)
        self.wgt_graphAxesScale = wx.CheckBox(self.axes, wx.ID_ANY, "")
        self.wgt_graphAxesMin = wx.TextCtrl(self.axes, wx.ID_ANY, ":", style=wx.TE_CENTRE)
        self.wgt_graphAxesMax = wx.TextCtrl(self.axes, wx.ID_ANY, ":", style=wx.TE_CENTRE)
        self.notebookGraphAxes = wx.Notebook(self.axes, wx.ID_ANY)
        self.axesLine = wx.Panel(self.notebookGraphAxes, wx.ID_ANY)
        self.wgt_graphAxesLineColor = wx.Button(self.axesLine, wx.ID_ANY, "")
        # modified
        self.wgt_graphAxesLinePos = wx.TextCtrl(self.axesLine, wx.ID_ANY, ":::")
        # end modified
        self.wgt_graphAxesLineWidth = wx.TextCtrl(self.axesLine, wx.ID_ANY, "")
        # modified
        self.wgt_graphAxesLineStyle = wx.ComboBox(self.axesLine, wx.ID_ANY, \
            choices=["solid", "dashed", "dashdot", "dotted"], style=wx.CB_DROPDOWN)
        # end modifoed
        self.wgt_graphAxesLineAlpha = wx.Slider(self.axesLine, wx.ID_ANY, 100, 0, 100)
        self.panel_3 = wx.Panel(self.axesLine, wx.ID_ANY)
        self.axesLabel = wx.Panel(self.notebookGraphAxes, wx.ID_ANY)
        self.wgt_graphAxesLabelText = wx.TextCtrl(self.axesLabel, wx.ID_ANY, "")
        self.wgt_graphAxesLabelFont = wx.Button(self.axesLabel, wx.ID_ANY, "sans")
        self.wgt_graphAxesLabelColor = wx.Button(self.axesLabel, wx.ID_ANY, "")
        self.wgt_graphAxesLabelPos = wx.TextCtrl(self.axesLabel, wx.ID_ANY, "0", style=wx.TE_CENTRE)
        self.wgt_graphAxesLabelRot = wx.TextCtrl(self.axesLabel, wx.ID_ANY, "0", style=wx.TE_CENTRE)
        self.wgt_graphAxesLabelAlpha = wx.Slider(self.axesLabel, wx.ID_ANY, 100, 0, 100)
        self.panel_1 = wx.Panel(self.axesLabel, wx.ID_ANY)
        self.axesTick = wx.Panel(self.notebookGraphAxes, wx.ID_ANY)
        self.wgt_graphAxesTickWhich = wx.ComboBox(self.axesTick, wx.ID_ANY, choices=["major", "minor", "both"], style=wx.CB_DROPDOWN)
        self.wgt_graphAxesTickColor = wx.Button(self.axesTick, wx.ID_ANY, "")
        self.wgt_graphAxesTickDirection = wx.ComboBox(self.axesTick, wx.ID_ANY, choices=["in", "out", "in & out"], style=wx.CB_DROPDOWN)
        self.wgt_graphAxesTickLength = wx.TextCtrl(self.axesTick, wx.ID_ANY, "", style=wx.TE_CENTRE)
        self.wgt_graphAxesTickWidth = wx.TextCtrl(self.axesTick, wx.ID_ANY, "", style=wx.TE_CENTRE)
        self.wgt_graphAxesTickFont = wx.Button(self.axesTick, wx.ID_ANY, "sans")
        self.wgt_graphAxesTickFontColor = wx.Button(self.axesTick, wx.ID_ANY, "")
        self.wgt_graphAxesTickPad = wx.TextCtrl(self.axesTick, wx.ID_ANY, "", style=wx.TE_CENTRE)
        self.wgt_graphAxesTickRotation = wx.TextCtrl(self.axesTick, wx.ID_ANY, "", style=wx.TE_CENTRE)
        self.wgt_graphAxesTickAlpha = wx.Slider(self.axesTick, wx.ID_ANY, 100, 0, 100)
        self.panel_2 = wx.Panel(self.axesTick, wx.ID_ANY)
        self.axesGrid = wx.Panel(self.notebookGraphAxes, wx.ID_ANY)
        self.wgt_graphAxesGridWhich = wx.ComboBox(self.axesGrid, wx.ID_ANY, choices=["major", "minor", "both"], style=wx.CB_DROPDOWN)
        self.wgt_graphAxesGridColor = wx.Button(self.axesGrid, wx.ID_ANY, "")
        self.wgt_graphAxesGridStyle = wx.ComboBox(self.axesGrid, wx.ID_ANY, choices=["solid", "dashed", "dashdot", "dotted"], style=wx.CB_DROPDOWN)
        self.wgt_graphAxesGridWidth = wx.TextCtrl(self.axesGrid, wx.ID_ANY, "")
        self.wgt_graphAxesGridAlpha = wx.Slider(self.axesGrid, wx.ID_ANY, 100, 0, 100)
        self.panel_4 = wx.Panel(self.axesGrid, wx.ID_ANY)
        self.data = wx.Panel(self.graphNotebook, wx.ID_ANY)
        self.wgt_graphDataSheet = wx.ComboBox(self.data, wx.ID_ANY, choices=[""], style=wx.CB_DROPDOWN)
        self.wgt_graphDataType = wx.ComboBox(self.data, wx.ID_ANY, choices=["line", "bar", "pie", "image"], style=wx.CB_DROPDOWN)
        self.wgt_graphDataX = wx.ComboBox(self.data, wx.ID_ANY, choices=[""], style=wx.CB_DROPDOWN)
        self.wgt_graphDataY = wx.ComboBox(self.data, wx.ID_ANY, choices=[""], style=wx.CB_DROPDOWN)
        self.wgt_graphDataWhichY = wx.ComboBox(self.data, wx.ID_ANY, choices=["y", "y1"], style=wx.CB_DROPDOWN)
        self.wgt_graphDataKeyText = wx.TextCtrl(self.data, wx.ID_ANY, "")
        self.wgt_graphDataCheckListPlot = wx.CheckListBox(self.data, wx.ID_ANY, choices=[""])
        self.wgt_graphDataAddPlot = wx.Button(self.data, wx.ID_ANY, "add")
        self.wgt_graphDataHidePlot = wx.Button(self.data, wx.ID_ANY, "hide")
        self.wgt_graphDataRemovePlot = wx.Button(self.data, wx.ID_ANY, "remove")
        self.notebook_3 = wx.Notebook(self.data, wx.ID_ANY)
        self.line = wx.Panel(self.notebook_3, wx.ID_ANY)
        self.wgt_graphDataLineColor = wx.Button(self.line, wx.ID_ANY, "")
        self.wgt_graphDataLineWidth = wx.TextCtrl(self.line, wx.ID_ANY, "2", style=wx.TE_CENTRE)
        self.wgt_graphDataLineStyle = wx.ComboBox(self.line, wx.ID_ANY, choices=["solid", "dashed", "dashdot", "dotted"], style=wx.CB_DROPDOWN)
        self.wgt_graphDataLineAlpha = wx.Slider(self.line, wx.ID_ANY, 100, 0, 100)
        self.panel_7 = wx.Panel(self.line, wx.ID_ANY)
        self.marker = wx.Panel(self.notebook_3, wx.ID_ANY)
        # Change the list into variable declared earlier
        self.wgt_graphDataMarkerType = wx.ComboBox(self.marker, wx.ID_ANY, choices=self.markerList, style=wx.CB_DROPDOWN)
        # End
        self.wgt_graphDataMarkerSize = wx.TextCtrl(self.marker, wx.ID_ANY, "8", style=wx.TE_CENTRE)
        self.wgt_graphDataMarkerFaceColor = wx.Button(self.marker, wx.ID_ANY, "")
        self.wgt_graphDataMarkerEdgeColor = wx.Button(self.marker, wx.ID_ANY, "")
        self.wgt_graphDataMarkerEdgeWidth = wx.TextCtrl(self.marker, wx.ID_ANY, "1", style=wx.TE_CENTRE)
        self.wgt_graphDataMarkerAlpha = wx.Slider(self.marker, wx.ID_ANY, 100, 0, 100)
        self.panel_6 = wx.Panel(self.marker, wx.ID_ANY)
        self.fill = wx.Panel(self.notebook_3, wx.ID_ANY)
        self.wgt_graphDataFillColor = wx.Button(self.fill, wx.ID_ANY, "")
        self.wgt_graphDataFillAlpha = wx.Slider(self.fill, wx.ID_ANY, 100, 0, 100)
        self.panel_8 = wx.Panel(self.fill, wx.ID_ANY)
        self.error = wx.Panel(self.notebook_3, wx.ID_ANY)
        self.wgt_graphDataErrorY = wx.ComboBox(self.error, wx.ID_ANY, choices=["None"], style=wx.CB_DROPDOWN)
        self.wgt_graphDataErrorX = wx.ComboBox(self.error, wx.ID_ANY, choices=["None"], style=wx.CB_DROPDOWN)
        self.wgt_graphDataErrorColor = wx.Button(self.error, wx.ID_ANY, "")
        self.wgt_graphDataErrorLineWidth = wx.TextCtrl(self.error, wx.ID_ANY, "1", style=wx.TE_CENTRE)
        self.wgt_graphDataErrorCapSize = wx.TextCtrl(self.error, wx.ID_ANY, "1", style=wx.TE_CENTRE)
        self.wgt_graphDataErrorBarAbove = wx.TextCtrl(self.error, wx.ID_ANY, "1", style=wx.TE_CENTRE)
        self.wgt_graphDataErrorAlpha = wx.Slider(self.error, wx.ID_ANY, 100, 0, 100)
        self.panel_10 = wx.Panel(self.error, wx.ID_ANY)
        self.legend = wx.Panel(self.graphNotebook, wx.ID_ANY)
        self.wgt_graphLegendPlace = wx.ComboBox(self.legend, wx.ID_ANY, choices=["best", "upper right", "upper left", "lower left", "lower right", "right", "center left", "center right", "lower center", "upper center", "center"], style=wx.CB_DROPDOWN)
        self.wgt_graphLegendShow = wx.CheckBox(self.legend, wx.ID_ANY, "")
        self.wgt_graphLegendSep = wx.CheckBox(self.legend, wx.ID_ANY, "")
        self.wgt_graphLegendAnchor = wx.TextCtrl(self.legend, wx.ID_ANY, "")
        self.wgt_graphLegendCol = wx.TextCtrl(self.legend, wx.ID_ANY, "1", style=wx.TE_CENTRE)
        self.wgt_graphLegendFont = wx.Button(self.legend, wx.ID_ANY, "")
        self.wgt_graphLegendShadow = wx.CheckBox(self.legend, wx.ID_ANY, "")
        self.wgt_graphLegendFaceColor = wx.Button(self.legend, wx.ID_ANY, "")
        self.wgt_graphLegendEdgeColor = wx.Button(self.legend, wx.ID_ANY, "")
        self.wgt_graphLegendFontColor = wx.Button(self.legend, wx.ID_ANY, "")
        self.wgt_graphLegendFrameAlpha = wx.Slider(self.legend, wx.ID_ANY, 100, 0, 100)
        self.wgt_graphLegendPadLabel = wx.TextCtrl(self.legend, wx.ID_ANY, "0.5", style=wx.TE_CENTRE)
        self.wgt_graphLegendPadCol = wx.TextCtrl(self.legend, wx.ID_ANY, "2.0", style=wx.TE_CENTRE)
        self.wgt_graphLegendPadLength = wx.TextCtrl(self.legend, wx.ID_ANY, "2.0", style=wx.TE_CENTRE)
        self.wgt_graphLegendPadText = wx.TextCtrl(self.legend, wx.ID_ANY, "0.8", style=wx.TE_CENTRE)
        self.wgt_graphLegendPadBorder = wx.TextCtrl(self.legend, wx.ID_ANY, "0.4", style=wx.TE_CENTRE)
        self.wgt_graphLegendPadAxes = wx.TextCtrl(self.legend, wx.ID_ANY, "0.5", style=wx.TE_CENTRE)
        self.wgt_graphLegendScale = wx.TextCtrl(self.legend, wx.ID_ANY, "1.0", style=wx.TE_CENTRE)
        self.wgt_graphLegendFlip = wx.CheckBox(self.legend, wx.ID_ANY, "")
        self.panel_5 = wx.Panel(self.legend, wx.ID_ANY)

        self.__set_properties()
        self.__do_layout()

        # ADDED METHODS
        self.graphSet() # to set the value of slider after slider creation
        
        # END ADDED METHODS 

        self.Bind(wx.EVT_BUTTON, self.plotHome, self.home)
        self.Bind(wx.EVT_BUTTON, self.plotBackward, self.backward)
        self.Bind(wx.EVT_BUTTON, self.plotForward, self.forward)
        self.Bind(wx.EVT_BUTTON, self.plotPan, self.pan)
        self.Bind(wx.EVT_BUTTON, self.plotZoom, self.zoom)
        self.Bind(wx.EVT_BUTTON, self.plotSave, self.save)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.topFrameMargin, self.wgt_topFrameMargin)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.leftFrameMargin, self.wgt_leftFrameMargin)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.rightFrameMargin, self.wgt_rightFrameMargin)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.bottomFrameMargin, self.wgt_bottomFrameMargin)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.horizontalWidthFrameMargin, self.wgt_horizontalWidthFrameMargin)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.verticalWidthFrameMargin, self.wgt_verticalWidthFrameMargin)
        self.Bind(wx.EVT_BUTTON, self.colorFrameBackground, self.wgt_colorFrameBackground)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.alphaFrameBackground, self.wgt_alphaFrameBackground)
        self.Bind(wx.EVT_TEXT, self.graphGridArrayRow, self.wgt_graphGridArrayRow)
        self.Bind(wx.EVT_TEXT, self.graphGridArrayCol, self.wgt_graphGridArrayCol)
        self.Bind(wx.EVT_TEXT, self.graphWidthRatio, self.wgt_graphWidthRatio)
        self.Bind(wx.EVT_TEXT, self.graphHeightRatio, self.wgt_graphHeightRatio)
        self.Bind(wx.EVT_COMBOBOX, self.graphPlotNo, self.wgt_graphPlotNo)
        self.Bind(wx.EVT_BUTTON, self.graphPlotNoAdd, self.wgt_graphPlotNoAdd)
        self.Bind(wx.EVT_BUTTON, self.graphPlotNoRemove, self.wgt_graphPlotNoRemove)
        self.Bind(wx.EVT_TEXT, self.graphCoordRow, self.wgt_graphCoordRow)
        self.Bind(wx.EVT_TEXT, self.graphCoordCol, self.wgt_graphCoordCol)
        self.Bind(wx.EVT_COMBOBOX, self.graphAxesSpine, self.wgt_graphAxesSpine)
        self.Bind(wx.EVT_CHECKBOX, self.graphAxesScale, self.wgt_graphAxesScale)
        self.Bind(wx.EVT_TEXT, self.graphAxesMin, self.wgt_graphAxesMin)
        self.Bind(wx.EVT_TEXT, self.graphAxesMax, self.wgt_graphAxesMax)
        self.Bind(wx.EVT_BUTTON, self.graphAxesLineColor, self.wgt_graphAxesLineColor)
        self.Bind(wx.EVT_TEXT, self.graphAxesLinePos, self.wgt_graphAxesLinePos)
        self.Bind(wx.EVT_TEXT, self.graphAxesLineWidth, self.wgt_graphAxesLineWidth)
        self.Bind(wx.EVT_COMBOBOX, self.graphAxesLineStyle, self.wgt_graphAxesLineStyle)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.graphAxesLineAlpha, self.wgt_graphAxesLineAlpha)
        self.Bind(wx.EVT_TEXT, self.graphAxesLabelText, self.wgt_graphAxesLabelText)
        self.Bind(wx.EVT_BUTTON, self.graphAxesLabelFont, self.wgt_graphAxesLabelFont)
        self.Bind(wx.EVT_BUTTON, self.graphAxesLabelColor, self.wgt_graphAxesLabelColor)
        self.Bind(wx.EVT_TEXT, self.graphAxesLabelPos, self.wgt_graphAxesLabelPos)
        self.Bind(wx.EVT_TEXT, self.graphAxesLabelRot, self.wgt_graphAxesLabelRot)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.graphAxesLabelAlpha, self.wgt_graphAxesLabelAlpha)
        self.Bind(wx.EVT_COMBOBOX, self.graphAxesTickWhich, self.wgt_graphAxesTickWhich)
        self.Bind(wx.EVT_BUTTON, self.graphAxesTickColor, self.wgt_graphAxesTickColor)
        self.Bind(wx.EVT_COMBOBOX, self.graphAxesTickDirection, self.wgt_graphAxesTickDirection)
        self.Bind(wx.EVT_TEXT, self.graphAxesTickLength, self.wgt_graphAxesTickLength)
        self.Bind(wx.EVT_TEXT, self.graphAxesTickWidth, self.wgt_graphAxesTickWidth)
        self.Bind(wx.EVT_BUTTON, self.graphAxesTickFont, self.wgt_graphAxesTickFont)
        self.Bind(wx.EVT_BUTTON, self.graphAxesTickFontColor, self.wgt_graphAxesTickFontColor)
        self.Bind(wx.EVT_TEXT, self.graphAxesTickPad, self.wgt_graphAxesTickPad)
        self.Bind(wx.EVT_TEXT, self.graphAxesTickRotation, self.wgt_graphAxesTickRotation)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.graphAxesTickAlpha, self.wgt_graphAxesTickAlpha)
        self.Bind(wx.EVT_COMBOBOX, self.graphAxesGridWhich, self.wgt_graphAxesGridWhich)
        self.Bind(wx.EVT_BUTTON, self.graphAxesGridColor, self.wgt_graphAxesGridColor)
        self.Bind(wx.EVT_COMBOBOX, self.graphAxesGridStyle, self.wgt_graphAxesGridStyle)
        self.Bind(wx.EVT_TEXT, self.graphAxesGridWidth, self.wgt_graphAxesGridWidth)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.graphAxesGridAlpha, self.wgt_graphAxesGridAlpha)
        self.Bind(wx.EVT_COMBOBOX, self.graphDataSheet, self.wgt_graphDataSheet)
        self.Bind(wx.EVT_COMBOBOX, self.graphDataType, self.wgt_graphDataType)
        self.Bind(wx.EVT_COMBOBOX, self.graphDataX, self.wgt_graphDataX)
        self.Bind(wx.EVT_COMBOBOX, self.graphDataY, self.wgt_graphDataY)
        self.Bind(wx.EVT_COMBOBOX, self.graphDataWhichY, self.wgt_graphDataWhichY)
        self.Bind(wx.EVT_TEXT, self.graphDataKeyText, self.wgt_graphDataKeyText)
        self.Bind(wx.EVT_CHECKLISTBOX, self.graphDataCheckListPlot, self.wgt_graphDataCheckListPlot)
        self.Bind(wx.EVT_BUTTON, self.graphDataAddPlot, self.wgt_graphDataAddPlot)
        self.Bind(wx.EVT_BUTTON, self.graphDataHidePlot, self.wgt_graphDataHidePlot)
        self.Bind(wx.EVT_BUTTON, self.graphDataRemovePlot, self.wgt_graphDataRemovePlot)
        self.Bind(wx.EVT_BUTTON, self.graphDataLineColor, self.wgt_graphDataLineColor)
        self.Bind(wx.EVT_TEXT, self.graphDataLineWidth, self.wgt_graphDataLineWidth)
        self.Bind(wx.EVT_COMBOBOX, self.graphDataLineStyle, self.wgt_graphDataLineStyle)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.graphDataLineAlpha, self.wgt_graphDataLineAlpha)
        self.Bind(wx.EVT_COMBOBOX, self.graphDataMarkerType, self.wgt_graphDataMarkerType)
        self.Bind(wx.EVT_TEXT, self.graphDataMarkerSize, self.wgt_graphDataMarkerSize)
        self.Bind(wx.EVT_BUTTON, self.graphDataMarkerFaceColor, self.wgt_graphDataMarkerFaceColor)
        self.Bind(wx.EVT_BUTTON, self.graphDataMarkerEdgeColor, self.wgt_graphDataMarkerEdgeColor)
        self.Bind(wx.EVT_TEXT, self.graphDataMarkerEdgeWidth, self.wgt_graphDataMarkerEdgeWidth)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.graphDataMarkerAlpha, self.wgt_graphDataMarkerAlpha)
        self.Bind(wx.EVT_BUTTON, self.graphDataFillColor, self.wgt_graphDataFillColor)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.graphDataFillAlpha, self.wgt_graphDataFillAlpha)
        self.Bind(wx.EVT_COMBOBOX, self.graphDataErrorY, self.wgt_graphDataErrorY)
        self.Bind(wx.EVT_COMBOBOX, self.graphDataErrorX, self.wgt_graphDataErrorX)
        self.Bind(wx.EVT_BUTTON, self.graphDataErrorColor, self.wgt_graphDataErrorColor)
        self.Bind(wx.EVT_TEXT, self.graphDataErrorLineWidth, self.wgt_graphDataErrorLineWidth)
        self.Bind(wx.EVT_TEXT, self.graphDataErrorCapSize, self.wgt_graphDataErrorCapSize)
        self.Bind(wx.EVT_TEXT, self.graphDataErrorBarAbove, self.wgt_graphDataErrorBarAbove)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.graphDataErrorAlpha, self.wgt_graphDataErrorAlpha)
        self.Bind(wx.EVT_COMBOBOX, self.graphLegendPlace, self.wgt_graphLegendPlace)
        self.Bind(wx.EVT_CHECKBOX, self.graphLegendShow, self.wgt_graphLegendShow)
        self.Bind(wx.EVT_CHECKBOX, self.graphLegendSep, self.wgt_graphLegendSep)
        self.Bind(wx.EVT_TEXT, self.graphLegendAnchor, self.wgt_graphLegendAnchor)
        self.Bind(wx.EVT_TEXT, self.graphLegendCol, self.wgt_graphLegendCol)
        self.Bind(wx.EVT_BUTTON, self.graphLegendFont, self.wgt_graphLegendFont)
        self.Bind(wx.EVT_CHECKBOX, self.graphLegendShadow, self.wgt_graphLegendShadow)
        self.Bind(wx.EVT_BUTTON, self.graphLegendFaceColor, self.wgt_graphLegendFaceColor)
        self.Bind(wx.EVT_BUTTON, self.graphLegendEdgeColor, self.wgt_graphLegendEdgeColor)
        self.Bind(wx.EVT_BUTTON, self.graphLegendFontColor, self.wgt_graphLegendFontColor)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.graphLegendFrameAlpha, self.wgt_graphLegendFrameAlpha)
        self.Bind(wx.EVT_TEXT, self.graphLegendPadLabel, self.wgt_graphLegendPadLabel)
        self.Bind(wx.EVT_TEXT, self.graphLegendPadCol, self.wgt_graphLegendPadCol)
        self.Bind(wx.EVT_TEXT, self.graphLegendPadLength, self.wgt_graphLegendPadLength)
        self.Bind(wx.EVT_TEXT, self.graphLegendPadText, self.wgt_graphLegendPadText)
        self.Bind(wx.EVT_TEXT, self.graphLegendPadBorder, self.wgt_graphLegendPadBorder)
        self.Bind(wx.EVT_TEXT, self.graphLegendPadAxes, self.wgt_graphLegendPadAxes)
        self.Bind(wx.EVT_TEXT, self.graphLegendScale, self.wgt_graphLegendScale)
        self.Bind(wx.EVT_CHECKBOX, self.graphLegendFlip, self.wgt_graphLegendFlip)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFramePlot.__set_properties
        self.SetTitle("Plot")
        self.panel_toolbarTop.SetMinSize((36, 192))
        self.home.SetToolTip("home")
        self.home.SetSize(self.home.GetBestSize())
        self.backward.SetToolTip("backward")
        self.backward.SetSize(self.backward.GetBestSize())
        self.forward.SetToolTip("forward")
        self.forward.SetSize(self.forward.GetBestSize())
        self.pan.SetToolTip("pan")
        self.pan.SetSize(self.pan.GetBestSize())
        self.zoom.SetToolTip("zoom")
        self.zoom.SetSize(self.zoom.GetBestSize())
        self.save.SetToolTip("save as")
        self.save.SetSize(self.save.GetBestSize())
        self.panel_toolbarBottom.SetMinSize((36, 192))
        self.wgt_topFrameMargin.SetMinSize((100, 25))
        self.wgt_leftFrameMargin.SetMinSize((100, 25))
        self.wgt_rightFrameMargin.SetMinSize((100, 25))
        self.wgt_bottomFrameMargin.SetMinSize((100, 25))
        self.wgt_horizontalWidthFrameMargin.SetMinSize((100, 25))
        self.wgt_verticalWidthFrameMargin.SetMinSize((100, 25))
        self.wgt_colorFrameBackground.SetMinSize((100, 25))
        self.wgt_colorFrameBackground.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.wgt_alphaFrameBackground.SetMinSize((100, 25))
        self.wgt_graphGridArrayRow.SetMinSize((50, 25))
        self.wgt_graphGridArrayRow.SetToolTip("The number of row of plots. Must be integer. E.g.: 1")
        self.wgt_graphGridArrayCol.SetMinSize((50, 25))
        self.wgt_graphGridArrayCol.SetToolTip("The number of column of plots. Must be integer. E.g.: 1")
        self.wgt_graphWidthRatio.SetMinSize((50, 25))
        self.wgt_graphWidthRatio.SetToolTip("The canvas graph ratio size for each row. Must be integer. E.g.: 1:2:1 for three rows")
        self.wgt_graphHeightRatio.SetMinSize((50, 25))
        self.wgt_graphHeightRatio.SetToolTip("The canvas graph ratio size for each column. Must be integer. E.g.: 1:2:1 for three columns")
        self.wgt_graphPlotNo.SetMinSize((50, 25))
        self.wgt_graphPlotNo.SetToolTip("Number of plots in canvas. E.g: 2")
        self.wgt_graphPlotNo.SetSelection(0)
        self.wgt_graphPlotNoAdd.SetMinSize((50, 25))
        self.wgt_graphPlotNoRemove.SetMinSize((50, 25))
        self.wgt_graphCoordRow.SetMinSize((50, 25))
        self.wgt_graphCoordCol.SetMinSize((50, 25))
        self.wgt_graphAxesSpine.SetMinSize((50, 25))
        self.wgt_graphAxesSpine.SetSelection(0)
        self.wgt_graphAxesMin.SetMinSize((50, 25))
        self.wgt_graphAxesMax.SetMinSize((50, 25))
        self.wgt_graphAxesLineColor.SetMinSize((50, 25))
        self.wgt_graphAxesLineColor.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.wgt_graphAxesLinePos.SetMinSize((50, 25))
        self.wgt_graphAxesLineWidth.SetMinSize((100, 25))
        self.wgt_graphAxesLineStyle.SetMinSize((100, 25))
        self.wgt_graphAxesLineAlpha.SetMinSize((100, 25))
        self.wgt_graphAxesLabelText.SetMinSize((100, 25))
        self.wgt_graphAxesLabelFont.SetMinSize((50, 25))
        self.wgt_graphAxesLabelColor.SetMinSize((50, 25))
        self.wgt_graphAxesLabelColor.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.wgt_graphAxesLabelPos.SetMinSize((50, 25))
        self.wgt_graphAxesLabelRot.SetMinSize((50, 25))
        self.wgt_graphAxesTickWhich.SetMinSize((50, 25))
        self.wgt_graphAxesTickColor.SetMinSize((50, 25))
        self.wgt_graphAxesTickColor.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.wgt_graphAxesTickDirection.SetMinSize((50, 25))
        self.wgt_graphAxesTickLength.SetMinSize((50, 25))
        self.wgt_graphAxesTickWidth.SetMinSize((50, 25))
        self.wgt_graphAxesTickFont.SetMinSize((50, 25))
        self.wgt_graphAxesTickFontColor.SetMinSize((50, 25))
        self.wgt_graphAxesTickFontColor.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.wgt_graphAxesTickPad.SetMinSize((50, 25))
        self.wgt_graphAxesTickRotation.SetMinSize((50, 25))
        self.wgt_graphAxesTickAlpha.SetMinSize((50, 25))
        self.wgt_graphAxesGridWhich.SetMinSize((100, 25))
        self.wgt_graphAxesGridColor.SetMinSize((100, 25))
        self.wgt_graphAxesGridColor.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.wgt_graphAxesGridStyle.SetMinSize((50, 25))
        self.wgt_graphAxesGridWidth.SetMinSize((50, 25))
        self.wgt_graphDataSheet.SetMinSize((120, 25))
        self.wgt_graphDataSheet.SetSelection(0)
        self.wgt_graphDataType.SetMinSize((90, 25))
        self.wgt_graphDataType.SetSelection(0)
        self.wgt_graphDataX.SetMinSize((120, 25))
        self.wgt_graphDataX.SetSelection(0)
        self.wgt_graphDataY.SetMinSize((120, 25))
        self.wgt_graphDataY.SetSelection(0)
        self.wgt_graphDataWhichY.SetMinSize((50, 25))
        self.wgt_graphDataWhichY.SetSelection(0)
        self.wgt_graphDataKeyText.SetMinSize((150, 25))
        self.wgt_graphDataAddPlot.SetMinSize((50, 25))
        self.wgt_graphDataHidePlot.SetMinSize((50, 25))
        self.wgt_graphDataRemovePlot.SetMinSize((50, 25))
        self.wgt_graphDataLineColor.SetMinSize((50, 25))
        self.wgt_graphDataLineColor.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.wgt_graphDataLineWidth.SetMinSize((100, 25))
        self.wgt_graphDataLineStyle.SetMinSize((100, 25))
        self.wgt_graphDataMarkerType.SetMinSize((100, 25))
        self.wgt_graphDataMarkerType.SetSelection(31)
        self.wgt_graphDataMarkerSize.SetMinSize((100, 25))
        self.wgt_graphDataMarkerFaceColor.SetMinSize((100, 25))
        self.wgt_graphDataMarkerFaceColor.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.wgt_graphDataMarkerEdgeColor.SetMinSize((100, 25))
        self.wgt_graphDataMarkerEdgeColor.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.wgt_graphDataMarkerEdgeWidth.SetMinSize((100, 25))
        self.wgt_graphDataFillColor.SetMinSize((100, 25))
        self.wgt_graphDataFillColor.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.wgt_graphDataFillAlpha.SetMinSize((100, 25))
        self.wgt_graphDataErrorY.SetMinSize((100, 25))
        self.wgt_graphDataErrorY.SetSelection(0)
        self.wgt_graphDataErrorX.SetMinSize((100, 25))
        self.wgt_graphDataErrorX.SetSelection(0)
        self.wgt_graphDataErrorColor.SetMinSize((100, 25))
        self.wgt_graphDataErrorColor.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.wgt_graphDataErrorLineWidth.SetMinSize((100, 25))
        self.wgt_graphDataErrorCapSize.SetMinSize((100, 25))
        self.wgt_graphDataErrorBarAbove.SetMinSize((100, 25))
        self.wgt_graphDataErrorAlpha.SetMinSize((100, 25))
        self.wgt_graphLegendPlace.SetMinSize((50, 25))
        self.wgt_graphLegendPlace.SetSelection(10)
        self.wgt_graphLegendShow.SetValue(0)
        self.wgt_graphLegendSep.SetValue(1)
        self.wgt_graphLegendAnchor.SetMinSize((50, 25))
        self.wgt_graphLegendCol.SetMinSize((50, 25))
        self.wgt_graphLegendFont.SetMinSize((50, 25))
        self.wgt_graphLegendFaceColor.SetMinSize((30, 25))
        self.wgt_graphLegendFaceColor.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.wgt_graphLegendEdgeColor.SetMinSize((30, 25))
        self.wgt_graphLegendEdgeColor.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.wgt_graphLegendFontColor.SetMinSize((30, 25))
        self.wgt_graphLegendFontColor.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.wgt_graphLegendFrameAlpha.SetMinSize((100, 25))
        self.wgt_graphLegendPadLabel.SetMinSize((50, 25))
        self.wgt_graphLegendPadCol.SetMinSize((50, 25))
        self.wgt_graphLegendPadLength.SetMinSize((50, 25))
        self.wgt_graphLegendPadText.SetMinSize((50, 25))
        self.wgt_graphLegendPadBorder.SetMinSize((50, 25))
        self.wgt_graphLegendPadAxes.SetMinSize((50, 25))
        self.wgt_graphLegendScale.SetMinSize((50, 25))
        self.wgt_graphLegendFlip.SetMinSize((50, 25))
        self.graphNotebook.SetBackgroundColour(wx.Colour(207, 207, 207))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFramePlot.__do_layout
        sizer_main = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_72 = wx.BoxSizer(wx.VERTICAL)
        sizer_84 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_75 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_74 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_73 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_69 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_71 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_66 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_65 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_63 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_54 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_62 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_76 = wx.BoxSizer(wx.VERTICAL)
        sizer_83 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_82 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_81 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_80 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_79 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_78 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_77 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_67 = wx.BoxSizer(wx.VERTICAL)
        sizer_70 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_68 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_53 = wx.BoxSizer(wx.VERTICAL)
        sizer_64 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_61 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_60 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_58 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_57 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_56 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_48 = wx.BoxSizer(wx.VERTICAL)
        sizer_52 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_51 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_50 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_49 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_13 = wx.BoxSizer(wx.VERTICAL)
        sizer_87 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_46 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_45 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_59 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_19 = wx.BoxSizer(wx.VERTICAL)
        sizer_38 = wx.BoxSizer(wx.VERTICAL)
        sizer_43 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_42 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_41 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_40 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_39 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_30 = wx.BoxSizer(wx.VERTICAL)
        sizer_37 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_36 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_35 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_33 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_32 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_34 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_31 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_25 = wx.BoxSizer(wx.VERTICAL)
        sizer_29 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_28 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_27 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_26 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_24 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_23 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_22 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_55 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_21 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_20 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_17 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_18 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_94 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_93 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_91 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_92 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_15 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_canvas = wx.BoxSizer(wx.HORIZONTAL)
        sizer_backendButton = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_toolbar = wx.WrapSizer(wx.VERTICAL)
        sizer_backendButton.Add(self.panel_toolbarTop, 1, wx.ALIGN_CENTER | wx.ALL | wx.EXPAND, 1)
        grid_sizer_toolbar.Add(self.home, 1, 0, 0)
        grid_sizer_toolbar.Add(self.backward, 1, 0, 0)
        grid_sizer_toolbar.Add(self.forward, 1, 0, 0)
        grid_sizer_toolbar.Add(self.pan, 1, 0, 0)
        grid_sizer_toolbar.Add(self.zoom, 1, 0, 0)
        grid_sizer_toolbar.Add(self.save, 1, 0, 0)
        sizer_backendButton.Add(grid_sizer_toolbar, 1, wx.ALIGN_CENTER | wx.ALL | wx.EXPAND, 1)
        sizer_backendButton.Add(self.panel_toolbarBottom, 1, wx.ALIGN_CENTER | wx.ALL | wx.EXPAND, 1)
        sizer_main.Add(sizer_backendButton, 1, wx.ALIGN_CENTER | wx.ALL | wx.EXPAND, 1)

        #### ADDED LINES
        sizer_canvas.Add(self.canvas, 1, wx.LEFT | wx.TOP | wx.EXPAND)
        #### FINISHED

        sizer_main.Add(sizer_canvas, 1, wx.ALL | wx.EXPAND, 2)
        label_16 = wx.StaticText(self.frameTab, wx.ID_ANY, "Margin")
        label_16.SetMinSize((250, 25))
        label_16.SetForegroundColour(wx.Colour(0, 127, 255))
        sizer_4.Add(label_16, 1, wx.ALIGN_CENTER_VERTICAL, 0)
        top = wx.StaticText(self.frameTab, wx.ID_ANY, "top")
        top.SetMinSize((50, 25))
        sizer_15.Add(top, 1, wx.ALIGN_CENTER, 0)
        sizer_15.Add(self.wgt_topFrameMargin, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_4.Add(sizer_15, 1, wx.EXPAND, 0)
        label_3 = wx.StaticText(self.frameTab, wx.ID_ANY, "left")
        label_3.SetMinSize((50, 25))
        sizer_5.Add(label_3, 1, wx.ALIGN_CENTER, 0)
        sizer_5.Add(self.wgt_leftFrameMargin, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_4.Add(sizer_5, 1, wx.EXPAND, 0)
        label_4 = wx.StaticText(self.frameTab, wx.ID_ANY, "right")
        label_4.SetMinSize((50, 25))
        sizer_6.Add(label_4, 1, wx.ALIGN_CENTER, 0)
        sizer_6.Add(self.wgt_rightFrameMargin, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_4.Add(sizer_6, 1, wx.EXPAND, 0)
        label_5 = wx.StaticText(self.frameTab, wx.ID_ANY, "bottom")
        label_5.SetMinSize((50, 25))
        sizer_7.Add(label_5, 1, wx.ALIGN_CENTER, 0)
        sizer_7.Add(self.wgt_bottomFrameMargin, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_4.Add(sizer_7, 1, wx.EXPAND, 0)
        label_6 = wx.StaticText(self.frameTab, wx.ID_ANY, "hoz. width")
        label_6.SetMinSize((50, 25))
        sizer_8.Add(label_6, 1, wx.ALIGN_CENTER, 0)
        sizer_8.Add(self.wgt_horizontalWidthFrameMargin, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_4.Add(sizer_8, 1, wx.EXPAND, 0)
        label_7 = wx.StaticText(self.frameTab, wx.ID_ANY, "vert. width")
        label_7.SetMinSize((50, 25))
        sizer_9.Add(label_7, 1, wx.ALIGN_CENTER, 0)
        sizer_9.Add(self.wgt_verticalWidthFrameMargin, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_4.Add(sizer_9, 1, wx.EXPAND, 0)
        label_10 = wx.StaticText(self.frameTab, wx.ID_ANY, "Background")
        label_10.SetMinSize((250, 25))
        label_10.SetForegroundColour(wx.Colour(0, 127, 255))
        sizer_4.Add(label_10, 1, wx.ALIGN_CENTER_VERTICAL, 0)
        label_12 = wx.StaticText(self.frameTab, wx.ID_ANY, "color")
        label_12.SetMinSize((50, 25))
        sizer_12.Add(label_12, 1, wx.ALIGN_CENTER, 0)
        sizer_12.Add(self.wgt_colorFrameBackground, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_4.Add(sizer_12, 1, wx.EXPAND, 0)
        label_8 = wx.StaticText(self.frameTab, wx.ID_ANY, "alpha")
        label_8.SetMinSize((50, 25))
        sizer_10.Add(label_8, 1, wx.ALIGN_CENTER, 0)
        sizer_10.Add(self.wgt_alphaFrameBackground, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_4.Add(sizer_10, 1, wx.EXPAND, 0)
        sizer_4.Add(self.panel_frame, 15, wx.ALIGN_CENTER | wx.ALL | wx.EXPAND, 1)
        self.frameTab.SetSizer(sizer_4)
        label_1 = wx.StaticText(self.graphTab, wx.ID_ANY, "grid array")
        sizer_91.Add(label_1, 1, wx.ALIGN_CENTER, 0)
        sizer_92.Add(self.wgt_graphGridArrayRow, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_92.Add(self.wgt_graphGridArrayCol, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_91.Add(sizer_92, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_91, 1, wx.EXPAND, 0)
        label_93 = wx.StaticText(self.graphTab, wx.ID_ANY, "width")
        sizer_93.Add(label_93, 1, wx.ALIGN_CENTER, 0)
        sizer_93.Add(self.wgt_graphWidthRatio, 1, wx.ALL, 2)
        label_94 = wx.StaticText(self.graphTab, wx.ID_ANY, "height")
        sizer_93.Add(label_94, 1, wx.ALIGN_CENTER, 0)
        sizer_93.Add(self.wgt_graphHeightRatio, 1, wx.ALL, 2)
        sizer_1.Add(sizer_93, 1, wx.EXPAND, 0)
        label_95 = wx.StaticText(self.graphTab, wx.ID_ANY, "plot no.")
        sizer_94.Add(label_95, 1, wx.ALIGN_CENTER, 0)
        sizer_94.Add(self.wgt_graphPlotNo, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_94.Add(self.wgt_graphPlotNoAdd, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_94.Add(self.wgt_graphPlotNoRemove, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_1.Add(sizer_94, 1, wx.EXPAND, 0)
        label_2 = wx.StaticText(self.graphTab, wx.ID_ANY, "graph coordinate")
        sizer_17.Add(label_2, 1, 0, 0)
        sizer_18.Add(self.wgt_graphCoordRow, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_18.Add(self.wgt_graphCoordCol, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_17.Add(sizer_18, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_17, 1, wx.EXPAND, 0)
        label_18 = wx.StaticText(self.axes, wx.ID_ANY, "spine")
        sizer_20.Add(label_18, 1, wx.ALIGN_CENTER, 0)
        sizer_20.Add(self.wgt_graphAxesSpine, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        label_19 = wx.StaticText(self.axes, wx.ID_ANY, "logscale")
        sizer_20.Add(label_19, 1, wx.ALIGN_CENTER, 0)
        sizer_20.Add(self.wgt_graphAxesScale, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_19.Add(sizer_20, 1, wx.EXPAND, 0)
        minText = wx.StaticText(self.axes, wx.ID_ANY, "min")
        sizer_21.Add(minText, 1, wx.ALIGN_CENTER, 0)
        sizer_21.Add(self.wgt_graphAxesMin, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        maxText = wx.StaticText(self.axes, wx.ID_ANY, "max")
        sizer_21.Add(maxText, 1, wx.ALIGN_CENTER, 0)
        sizer_21.Add(self.wgt_graphAxesMax, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_19.Add(sizer_21, 1, wx.EXPAND, 0)
        label_51 = wx.StaticText(self.axesLine, wx.ID_ANY, "color")
        sizer_55.Add(label_51, 1, wx.ALIGN_CENTER, 0)
        sizer_55.Add(self.wgt_graphAxesLineColor, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        label_52 = wx.StaticText(self.axesLine, wx.ID_ANY, "position")
        sizer_55.Add(label_52, 1, wx.ALIGN_CENTER, 0)
        sizer_55.Add(self.wgt_graphAxesLinePos, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_3.Add(sizer_55, 1, wx.EXPAND, 0)
        label_20 = wx.StaticText(self.axesLine, wx.ID_ANY, "width")
        sizer_22.Add(label_20, 1, wx.ALIGN_CENTER, 0)
        sizer_22.Add(self.wgt_graphAxesLineWidth, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_3.Add(sizer_22, 1, wx.EXPAND, 0)
        label_21 = wx.StaticText(self.axesLine, wx.ID_ANY, "style")
        sizer_23.Add(label_21, 1, wx.ALIGN_CENTER, 0)
        sizer_23.Add(self.wgt_graphAxesLineStyle, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_3.Add(sizer_23, 1, wx.EXPAND, 0)
        label_22 = wx.StaticText(self.axesLine, wx.ID_ANY, "alpha")
        sizer_24.Add(label_22, 1, wx.ALIGN_CENTER, 0)
        sizer_24.Add(self.wgt_graphAxesLineAlpha, 1, wx.ALIGN_CENTER | wx.ALL | wx.EXPAND, 2)
        sizer_3.Add(sizer_24, 1, wx.EXPAND, 0)
        sizer_3.Add(self.panel_3, 11, wx.EXPAND, 0)
        self.axesLine.SetSizer(sizer_3)
        label_23 = wx.StaticText(self.axesLabel, wx.ID_ANY, "text")
        sizer_26.Add(label_23, 1, wx.ALIGN_CENTER, 0)
        sizer_26.Add(self.wgt_graphAxesLabelText, 3, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_25.Add(sizer_26, 1, wx.EXPAND, 0)
        label_24 = wx.StaticText(self.axesLabel, wx.ID_ANY, "font")
        sizer_27.Add(label_24, 1, wx.ALIGN_CENTER, 0)
        sizer_27.Add(self.wgt_graphAxesLabelFont, 1, wx.ALL, 2)
        label_25 = wx.StaticText(self.axesLabel, wx.ID_ANY, "color")
        sizer_27.Add(label_25, 1, wx.ALIGN_CENTER, 0)
        sizer_27.Add(self.wgt_graphAxesLabelColor, 1, wx.ALL, 2)
        sizer_25.Add(sizer_27, 1, wx.EXPAND, 0)
        label_26 = wx.StaticText(self.axesLabel, wx.ID_ANY, "position")
        sizer_28.Add(label_26, 1, wx.ALIGN_CENTER, 0)
        sizer_28.Add(self.wgt_graphAxesLabelPos, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        label_27 = wx.StaticText(self.axesLabel, wx.ID_ANY, "rotation")
        sizer_28.Add(label_27, 1, wx.ALIGN_CENTER, 0)
        sizer_28.Add(self.wgt_graphAxesLabelRot, 1, wx.ALL, 2)
        sizer_25.Add(sizer_28, 1, wx.EXPAND, 0)
        label_28 = wx.StaticText(self.axesLabel, wx.ID_ANY, "alpha")
        sizer_29.Add(label_28, 1, wx.ALIGN_CENTER, 0)
        sizer_29.Add(self.wgt_graphAxesLabelAlpha, 1, wx.ALL | wx.EXPAND, 2)
        sizer_25.Add(sizer_29, 1, wx.EXPAND, 0)
        sizer_25.Add(self.panel_1, 12, wx.EXPAND, 0)
        self.axesLabel.SetSizer(sizer_25)
        label_29 = wx.StaticText(self.axesTick, wx.ID_ANY, "which")
        sizer_31.Add(label_29, 1, wx.ALIGN_CENTER, 0)
        sizer_31.Add(self.wgt_graphAxesTickWhich, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_30.Add(sizer_31, 1, wx.EXPAND, 0)
        label_30 = wx.StaticText(self.axesTick, wx.ID_ANY, "color")
        sizer_34.Add(label_30, 1, wx.ALIGN_CENTER, 0)
        sizer_34.Add(self.wgt_graphAxesTickColor, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_30.Add(sizer_34, 1, wx.EXPAND, 0)
        label_31 = wx.StaticText(self.axesTick, wx.ID_ANY, "direction")
        sizer_32.Add(label_31, 1, wx.ALIGN_CENTER | wx.ALL, 0)
        sizer_32.Add(self.wgt_graphAxesTickDirection, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_30.Add(sizer_32, 1, wx.EXPAND, 0)
        label_32 = wx.StaticText(self.axesTick, wx.ID_ANY, "length")
        sizer_33.Add(label_32, 1, wx.ALIGN_CENTER, 0)
        sizer_33.Add(self.wgt_graphAxesTickLength, 1, wx.ALL, 2)
        label_33 = wx.StaticText(self.axesTick, wx.ID_ANY, "width")
        sizer_33.Add(label_33, 1, wx.ALIGN_CENTER, 0)
        sizer_33.Add(self.wgt_graphAxesTickWidth, 1, wx.ALL, 2)
        sizer_30.Add(sizer_33, 1, wx.EXPAND, 0)
        label_34 = wx.StaticText(self.axesTick, wx.ID_ANY, "font")
        sizer_35.Add(label_34, 1, wx.ALIGN_CENTER, 0)
        sizer_35.Add(self.wgt_graphAxesTickFont, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        label_35 = wx.StaticText(self.axesTick, wx.ID_ANY, "color")
        sizer_35.Add(label_35, 1, wx.ALIGN_CENTER, 0)
        sizer_35.Add(self.wgt_graphAxesTickFontColor, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_30.Add(sizer_35, 1, wx.EXPAND, 0)
        label_36 = wx.StaticText(self.axesTick, wx.ID_ANY, "pad")
        sizer_36.Add(label_36, 1, wx.ALIGN_CENTER, 0)
        sizer_36.Add(self.wgt_graphAxesTickPad, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        label_37 = wx.StaticText(self.axesTick, wx.ID_ANY, "rotation")
        sizer_36.Add(label_37, 1, wx.ALIGN_CENTER, 0)
        sizer_36.Add(self.wgt_graphAxesTickRotation, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_30.Add(sizer_36, 1, wx.EXPAND, 0)
        label_38 = wx.StaticText(self.axesTick, wx.ID_ANY, "alpha")
        sizer_37.Add(label_38, 1, wx.ALIGN_CENTER, 0)
        sizer_37.Add(self.wgt_graphAxesTickAlpha, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_30.Add(sizer_37, 1, wx.EXPAND, 0)
        sizer_30.Add(self.panel_2, 8, wx.EXPAND, 0)
        self.axesTick.SetSizer(sizer_30)
        label_39 = wx.StaticText(self.axesGrid, wx.ID_ANY, "which")
        sizer_39.Add(label_39, 1, wx.ALIGN_CENTER, 0)
        sizer_39.Add(self.wgt_graphAxesGridWhich, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_38.Add(sizer_39, 1, wx.EXPAND, 0)
        label_40 = wx.StaticText(self.axesGrid, wx.ID_ANY, "color")
        sizer_40.Add(label_40, 1, wx.ALIGN_CENTER, 0)
        sizer_40.Add(self.wgt_graphAxesGridColor, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_38.Add(sizer_40, 1, wx.EXPAND, 0)
        label_41 = wx.StaticText(self.axesGrid, wx.ID_ANY, "style")
        sizer_41.Add(label_41, 1, wx.ALIGN_CENTER, 0)
        sizer_41.Add(self.wgt_graphAxesGridStyle, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_38.Add(sizer_41, 1, wx.EXPAND, 0)
        label_42 = wx.StaticText(self.axesGrid, wx.ID_ANY, "width")
        sizer_42.Add(label_42, 1, wx.ALIGN_CENTER, 0)
        sizer_42.Add(self.wgt_graphAxesGridWidth, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_38.Add(sizer_42, 1, wx.EXPAND, 0)
        label_43 = wx.StaticText(self.axesGrid, wx.ID_ANY, "alpha")
        sizer_43.Add(label_43, 1, wx.ALIGN_CENTER, 0)
        sizer_43.Add(self.wgt_graphAxesGridAlpha, 1, wx.ALIGN_CENTER | wx.ALL | wx.EXPAND, 2)
        sizer_38.Add(sizer_43, 1, wx.EXPAND, 0)
        sizer_38.Add(self.panel_4, 12, wx.EXPAND, 0)
        self.axesGrid.SetSizer(sizer_38)
        self.notebookGraphAxes.AddPage(self.axesLine, "line")
        self.notebookGraphAxes.AddPage(self.axesLabel, "label")
        self.notebookGraphAxes.AddPage(self.axesTick, "tick")
        self.notebookGraphAxes.AddPage(self.axesGrid, "grid")
        sizer_19.Add(self.notebookGraphAxes, 12, wx.ALIGN_CENTER | wx.ALL | wx.EXPAND, 3)
        self.axes.SetSizer(sizer_19)
        label_97 = wx.StaticText(self.data, wx.ID_ANY, "spreadsheet")
        sizer_59.Add(label_97, 2, wx.ALIGN_CENTER, 0)
        sizer_59.Add(self.wgt_graphDataSheet, 3, wx.ALIGN_CENTER | wx.ALL, 2)
        label_45 = wx.StaticText(self.data, wx.ID_ANY, "type")
        sizer_59.Add(label_45, 1, wx.ALIGN_CENTER, 0)
        sizer_59.Add(self.wgt_graphDataType, 2, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_2.Add(sizer_59, 1, wx.EXPAND, 0)
        label_46 = wx.StaticText(self.data, wx.ID_ANY, "x")
        sizer_45.Add(label_46, 1, wx.ALIGN_CENTER, 0)
        sizer_45.Add(self.wgt_graphDataX, 4, wx.ALIGN_CENTER | wx.ALL, 2)
        label_49 = wx.StaticText(self.data, wx.ID_ANY, "to")
        sizer_45.Add(label_49, 1, wx.ALIGN_CENTER, 0)
        label_50 = wx.StaticText(self.data, wx.ID_ANY, "x")
        sizer_45.Add(label_50, 2, wx.ALIGN_CENTER, 0)
        sizer_2.Add(sizer_45, 1, wx.EXPAND, 0)
        label_47 = wx.StaticText(self.data, wx.ID_ANY, "y")
        sizer_46.Add(label_47, 1, wx.ALIGN_CENTER, 0)
        sizer_46.Add(self.wgt_graphDataY, 4, wx.ALL, 2)
        label_48 = wx.StaticText(self.data, wx.ID_ANY, "to")
        sizer_46.Add(label_48, 1, wx.ALIGN_CENTER, 0)
        sizer_46.Add(self.wgt_graphDataWhichY, 2, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_2.Add(sizer_46, 1, wx.EXPAND, 0)
        label_102 = wx.StaticText(self.data, wx.ID_ANY, "key text")
        sizer_87.Add(label_102, 1, wx.ALIGN_CENTER, 0)
        sizer_87.Add(self.wgt_graphDataKeyText, 3, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_2.Add(sizer_87, 1, wx.EXPAND, 0)
        sizer_11.Add(self.wgt_graphDataCheckListPlot, 6, wx.ALIGN_CENTER | wx.ALL | wx.EXPAND, 1)
        sizer_13.Add(self.wgt_graphDataAddPlot, 1, wx.ALIGN_CENTER | wx.ALL | wx.EXPAND, 2)
        sizer_13.Add(self.wgt_graphDataHidePlot, 1, wx.ALIGN_CENTER | wx.ALL | wx.EXPAND, 2)
        sizer_13.Add(self.wgt_graphDataRemovePlot, 1, wx.ALIGN_CENTER | wx.ALL | wx.EXPAND, 2)
        sizer_11.Add(sizer_13, 1, wx.EXPAND, 0)
        sizer_2.Add(sizer_11, 1, wx.EXPAND, 0)
        label_54 = wx.StaticText(self.line, wx.ID_ANY, "color")
        sizer_49.Add(label_54, 1, wx.ALIGN_CENTER, 0)
        sizer_49.Add(self.wgt_graphDataLineColor, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_48.Add(sizer_49, 1, wx.EXPAND, 0)
        label_55 = wx.StaticText(self.line, wx.ID_ANY, "width")
        sizer_50.Add(label_55, 1, wx.ALIGN_CENTER, 0)
        sizer_50.Add(self.wgt_graphDataLineWidth, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_48.Add(sizer_50, 1, wx.EXPAND, 0)
        label_56 = wx.StaticText(self.line, wx.ID_ANY, "style")
        sizer_51.Add(label_56, 1, wx.ALIGN_CENTER, 0)
        sizer_51.Add(self.wgt_graphDataLineStyle, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_48.Add(sizer_51, 1, wx.EXPAND, 0)
        label_57 = wx.StaticText(self.line, wx.ID_ANY, "alpha")
        sizer_52.Add(label_57, 1, wx.ALIGN_CENTER, 0)
        sizer_52.Add(self.wgt_graphDataLineAlpha, 1, wx.ALIGN_CENTER | wx.ALL | wx.EXPAND, 2)
        sizer_48.Add(sizer_52, 1, wx.EXPAND, 0)
        sizer_48.Add(self.panel_7, 7, wx.EXPAND, 0)
        self.line.SetSizer(sizer_48)
        label_58 = wx.StaticText(self.marker, wx.ID_ANY, "type")
        sizer_56.Add(label_58, 1, wx.ALIGN_CENTER, 0)
        sizer_56.Add(self.wgt_graphDataMarkerType, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_53.Add(sizer_56, 1, wx.EXPAND, 0)
        label_59 = wx.StaticText(self.marker, wx.ID_ANY, "size")
        sizer_57.Add(label_59, 1, wx.ALIGN_CENTER, 0)
        sizer_57.Add(self.wgt_graphDataMarkerSize, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_53.Add(sizer_57, 1, wx.EXPAND, 0)
        label_60 = wx.StaticText(self.marker, wx.ID_ANY, "face color")
        sizer_58.Add(label_60, 1, wx.ALIGN_CENTER, 0)
        sizer_58.Add(self.wgt_graphDataMarkerFaceColor, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_53.Add(sizer_58, 1, wx.EXPAND, 0)
        label_61 = wx.StaticText(self.marker, wx.ID_ANY, "edge color")
        sizer_60.Add(label_61, 1, wx.ALIGN_CENTER, 0)
        sizer_60.Add(self.wgt_graphDataMarkerEdgeColor, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_53.Add(sizer_60, 1, wx.EXPAND, 0)
        label_62 = wx.StaticText(self.marker, wx.ID_ANY, "edge width")
        sizer_61.Add(label_62, 1, wx.ALIGN_CENTER, 0)
        sizer_61.Add(self.wgt_graphDataMarkerEdgeWidth, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_53.Add(sizer_61, 1, wx.EXPAND, 0)
        label_63 = wx.StaticText(self.marker, wx.ID_ANY, "alpha")
        sizer_64.Add(label_63, 1, wx.ALIGN_CENTER, 0)
        sizer_64.Add(self.wgt_graphDataMarkerAlpha, 1, wx.ALIGN_CENTER | wx.ALL | wx.EXPAND, 2)
        sizer_53.Add(sizer_64, 1, wx.EXPAND, 0)
        sizer_53.Add(self.panel_6, 5, wx.EXPAND, 0)
        self.marker.SetSizer(sizer_53)
        label_64 = wx.StaticText(self.fill, wx.ID_ANY, "color")
        sizer_68.Add(label_64, 1, wx.ALIGN_CENTER, 0)
        sizer_68.Add(self.wgt_graphDataFillColor, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_67.Add(sizer_68, 1, wx.EXPAND, 0)
        label_65 = wx.StaticText(self.fill, wx.ID_ANY, "alpha")
        sizer_70.Add(label_65, 1, wx.ALIGN_CENTER, 0)
        sizer_70.Add(self.wgt_graphDataFillAlpha, 1, wx.ALIGN_CENTER | wx.ALL | wx.EXPAND, 2)
        sizer_67.Add(sizer_70, 1, wx.EXPAND, 0)
        sizer_67.Add(self.panel_8, 8, wx.EXPAND, 0)
        self.fill.SetSizer(sizer_67)
        label_66 = wx.StaticText(self.error, wx.ID_ANY, "y error")
        sizer_77.Add(label_66, 1, wx.ALIGN_CENTER, 0)
        sizer_77.Add(self.wgt_graphDataErrorY, 1, wx.ALL, 2)
        sizer_76.Add(sizer_77, 1, wx.EXPAND, 0)
        label_67 = wx.StaticText(self.error, wx.ID_ANY, "x error")
        sizer_78.Add(label_67, 1, wx.ALIGN_CENTER, 0)
        sizer_78.Add(self.wgt_graphDataErrorX, 1, wx.ALL, 2)
        sizer_76.Add(sizer_78, 1, wx.EXPAND, 0)
        label_68 = wx.StaticText(self.error, wx.ID_ANY, "color")
        sizer_79.Add(label_68, 1, wx.ALIGN_CENTER, 0)
        sizer_79.Add(self.wgt_graphDataErrorColor, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_76.Add(sizer_79, 1, wx.EXPAND, 0)
        label_69 = wx.StaticText(self.error, wx.ID_ANY, "line width")
        sizer_80.Add(label_69, 1, wx.ALIGN_CENTER, 0)
        sizer_80.Add(self.wgt_graphDataErrorLineWidth, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_76.Add(sizer_80, 1, wx.EXPAND, 0)
        label_70 = wx.StaticText(self.error, wx.ID_ANY, "cap size")
        sizer_81.Add(label_70, 1, wx.ALIGN_CENTER, 0)
        sizer_81.Add(self.wgt_graphDataErrorCapSize, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_76.Add(sizer_81, 1, wx.EXPAND, 0)
        label_71 = wx.StaticText(self.error, wx.ID_ANY, "bar above")
        sizer_82.Add(label_71, 1, wx.ALIGN_CENTER, 0)
        sizer_82.Add(self.wgt_graphDataErrorBarAbove, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_76.Add(sizer_82, 1, wx.EXPAND, 0)
        label_72 = wx.StaticText(self.error, wx.ID_ANY, "alpha")
        sizer_83.Add(label_72, 1, wx.ALIGN_CENTER, 0)
        sizer_83.Add(self.wgt_graphDataErrorAlpha, 1, wx.ALIGN_CENTER | wx.ALL | wx.EXPAND, 2)
        sizer_76.Add(sizer_83, 1, wx.EXPAND, 0)
        sizer_76.Add(self.panel_10, 3, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.error.SetSizer(sizer_76)
        self.notebook_3.AddPage(self.line, "line")
        self.notebook_3.AddPage(self.marker, "marker")
        self.notebook_3.AddPage(self.fill, "fill")
        self.notebook_3.AddPage(self.error, "error")
        sizer_2.Add(self.notebook_3, 1, wx.EXPAND, 0)
        self.data.SetSizer(sizer_2)
        label_73 = wx.StaticText(self.legend, wx.ID_ANY, "place")
        sizer_62.Add(label_73, 2, wx.ALIGN_CENTER, 0)
        sizer_62.Add(self.wgt_graphLegendPlace, 7, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_72.Add(sizer_62, 1, wx.EXPAND, 0)
        label_74 = wx.StaticText(self.legend, wx.ID_ANY, "show")
        sizer_54.Add(label_74, 1, wx.ALIGN_CENTER, 0)
        sizer_54.Add(self.wgt_graphLegendShow, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        label_15 = wx.StaticText(self.legend, wx.ID_ANY, "separate")
        sizer_54.Add(label_15, 1, wx.ALIGN_CENTER, 0)
        sizer_54.Add(self.wgt_graphLegendSep, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_72.Add(sizer_54, 1, wx.EXPAND, 0)
        label_75 = wx.StaticText(self.legend, wx.ID_ANY, "anchor")
        sizer_63.Add(label_75, 1, wx.ALIGN_CENTER, 0)
        sizer_63.Add(self.wgt_graphLegendAnchor, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        label_76 = wx.StaticText(self.legend, wx.ID_ANY, "column")
        sizer_63.Add(label_76, 1, wx.ALIGN_CENTER, 0)
        sizer_63.Add(self.wgt_graphLegendCol, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_72.Add(sizer_63, 1, wx.EXPAND, 0)
        label_77 = wx.StaticText(self.legend, wx.ID_ANY, "font")
        sizer_65.Add(label_77, 1, wx.ALIGN_CENTER, 0)
        sizer_65.Add(self.wgt_graphLegendFont, 1, wx.ALL, 2)
        label_78 = wx.StaticText(self.legend, wx.ID_ANY, "shadow")
        sizer_65.Add(label_78, 1, wx.ALIGN_CENTER, 0)
        sizer_65.Add(self.wgt_graphLegendShadow, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_72.Add(sizer_65, 1, wx.EXPAND, 0)
        label_79 = wx.StaticText(self.legend, wx.ID_ANY, "color")
        label_79.SetMinSize((240, 15))
        label_79.SetForegroundColour(wx.Colour(0, 127, 255))
        label_79.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_ITALIC, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_72.Add(label_79, 1, wx.ALIGN_CENTER | wx.EXPAND, 2)
        label_80 = wx.StaticText(self.legend, wx.ID_ANY, "face")
        sizer_66.Add(label_80, 1, wx.ALIGN_CENTER, 0)
        sizer_66.Add(self.wgt_graphLegendFaceColor, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        label_81 = wx.StaticText(self.legend, wx.ID_ANY, "edge")
        sizer_66.Add(label_81, 1, wx.ALIGN_CENTER, 0)
        sizer_66.Add(self.wgt_graphLegendEdgeColor, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        label_82 = wx.StaticText(self.legend, wx.ID_ANY, "font")
        sizer_66.Add(label_82, 1, wx.ALIGN_CENTER, 0)
        sizer_66.Add(self.wgt_graphLegendFontColor, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_72.Add(sizer_66, 1, wx.EXPAND, 0)
        label_83 = wx.StaticText(self.legend, wx.ID_ANY, "frame alpha")
        sizer_71.Add(label_83, 1, wx.ALIGN_CENTER, 0)
        sizer_71.Add(self.wgt_graphLegendFrameAlpha, 1, wx.ALIGN_CENTER | wx.ALL | wx.EXPAND, 2)
        sizer_72.Add(sizer_71, 1, wx.EXPAND, 0)
        label_84 = wx.StaticText(self.legend, wx.ID_ANY, "spacing/pad")
        label_84.SetMinSize((240, 15))
        label_84.SetForegroundColour(wx.Colour(0, 127, 255))
        label_84.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_ITALIC, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_72.Add(label_84, 1, wx.EXPAND | wx.TOP, 2)
        label_85 = wx.StaticText(self.legend, wx.ID_ANY, "label")
        sizer_69.Add(label_85, 1, wx.ALIGN_CENTER, 0)
        sizer_69.Add(self.wgt_graphLegendPadLabel, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        label_86 = wx.StaticText(self.legend, wx.ID_ANY, "column")
        sizer_69.Add(label_86, 1, wx.ALIGN_CENTER, 0)
        sizer_69.Add(self.wgt_graphLegendPadCol, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_72.Add(sizer_69, 1, wx.EXPAND, 0)
        label_87 = wx.StaticText(self.legend, wx.ID_ANY, "length")
        sizer_73.Add(label_87, 1, wx.ALIGN_CENTER, 0)
        sizer_73.Add(self.wgt_graphLegendPadLength, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        label_88 = wx.StaticText(self.legend, wx.ID_ANY, "text")
        sizer_73.Add(label_88, 1, wx.ALIGN_CENTER, 0)
        sizer_73.Add(self.wgt_graphLegendPadText, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_72.Add(sizer_73, 1, wx.EXPAND, 0)
        label_89 = wx.StaticText(self.legend, wx.ID_ANY, "border")
        sizer_74.Add(label_89, 1, wx.ALIGN_CENTER, 0)
        sizer_74.Add(self.wgt_graphLegendPadBorder, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        label_90 = wx.StaticText(self.legend, wx.ID_ANY, "axes")
        sizer_74.Add(label_90, 1, wx.ALIGN_CENTER, 0)
        sizer_74.Add(self.wgt_graphLegendPadAxes, 1, wx.ALL, 2)
        sizer_72.Add(sizer_74, 1, wx.EXPAND, 0)
        label_91 = wx.StaticText(self.legend, wx.ID_ANY, "marker")
        label_91.SetForegroundColour(wx.Colour(0, 127, 255))
        label_91.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_ITALIC, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_75.Add(label_91, 1, wx.EXPAND | wx.TOP, 2)
        sizer_72.Add(sizer_75, 1, wx.EXPAND, 0)
        label_92 = wx.StaticText(self.legend, wx.ID_ANY, "scale")
        sizer_84.Add(label_92, 1, wx.ALIGN_CENTER, 0)
        sizer_84.Add(self.wgt_graphLegendScale, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        label_96 = wx.StaticText(self.legend, wx.ID_ANY, "flip")
        sizer_84.Add(label_96, 1, wx.ALIGN_CENTER, 0)
        sizer_84.Add(self.wgt_graphLegendFlip, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_72.Add(sizer_84, 1, wx.EXPAND, 0)
        sizer_72.Add(self.panel_5, 14, wx.EXPAND, 0)
        self.legend.SetSizer(sizer_72)
        self.graphNotebook.AddPage(self.axes, "axes")
        self.graphNotebook.AddPage(self.data, "data")
        self.graphNotebook.AddPage(self.legend, "legend")
        sizer_1.Add(self.graphNotebook, 4, wx.EXPAND, 0)
        self.graphTab.SetSizer(sizer_1)
        self.notebook_1.AddPage(self.frameTab, "Frame")
        self.notebook_1.AddPage(self.graphTab, "Graph")
        sizer_main.Add(self.notebook_1, 6, wx.ALIGN_CENTER | wx.ALL | wx.EXPAND, 0)
        self.SetSizer(sizer_main)
        self.Layout()
        # end wxGlade

    #### ADDED FUNCTIONS
    def dataAndPlot(self, data):

        self.data = data

        try:
            self.sheetName = list(data.keys()) #ADD
            self.wgt_graphDataSheet.Set(self.sheetName)
        except:
            pass

        self.frame_color = 'w'
        self.plot_color = 'w'
        
        self.figure.set_facecolor(self.frame_color)

        self.orig_leftFrameMargin = self.figure.subplotpars.left
        self.orig_rightFrameMargin = self.figure.subplotpars.right
        self.orig_topFrameMargin = self.figure.subplotpars.top
        self.orig_bottomFrameMargin = self.figure.subplotpars.bottom

        self.orig_horizontalWidthFrameMargin = self.figure.subplotpars.hspace
        self.orig_verticalWidthFrameMargin = self.figure.subplotpars.wspace

    def graphSet(self): ##

        self.wgt_leftFrameMargin.SetValue(int(self.figure.subplotpars.left*100))
        self.wgt_rightFrameMargin.SetValue(int(self.figure.subplotpars.right*100))
        self.wgt_topFrameMargin.SetValue(int(self.figure.subplotpars.top*100))
        self.wgt_bottomFrameMargin.SetValue(int(self.figure.subplotpars.bottom*100))

        self.wgt_horizontalWidthFrameMargin.SetValue(int(self.figure.subplotpars.hspace*100))
        self.wgt_verticalWidthFrameMargin.SetValue(int(self.figure.subplotpars.wspace*100))

        self.orig_leftFrameMargin = self.figure.subplotpars.left
        self.orig_rightFrameMargin = self.figure.subplotpars.right
        self.orig_topFrameMargin = self.figure.subplotpars.top
        self.orig_bottomFrameMargin = self.figure.subplotpars.bottom

        self.orig_horizontalWidthFrameMargin = self.figure.subplotpars.hspace
        self.orig_verticalWidthFrameMargin = self.figure.subplotpars.wspace       

        # Acquiring graph properties
        ## no. of array
        self.nrows = int(self.wgt_graphGridArrayRow.GetValue()) # default is 1
        self.ncols = int(self.wgt_graphGridArrayCol.GetValue()) # default is 1

        ## ratios of arrays in list form
        self.width_ratios = self.wgt_graphWidthRatio.GetValue()
        if self.width_ratios == ':':
            self.width_ratios = [1]
        else:
            try:
                self.width_ratios = self.width_ratios.split(':')
                self.width_ratios = [int(i) for i in self.width_ratios]
            except:
                pass

        self.height_ratios = self.wgt_graphHeightRatio.GetValue()
        if self.height_ratios == ':':
            self.height_ratios = [1]
        else:
            try:
                self.height_ratios = self.height_ratios.split(':')
                self.height_ratios = [int(i) for i in self.height_ratios]
            except:
                pass

        ## setting the grid properties
        self.gs = gridspec.GridSpec(nrows=self.nrows, ncols=self.ncols,\
            width_ratios=self.width_ratios, height_ratios=self.height_ratios)

        # Graph No: # which plot no
        # String key for self.axes dict
        self.whichPlotNo = self.wgt_graphPlotNo.GetValue() # default is 1
        
        ## setting the plot position in list position form
        self.whichPlot_rowCoord = self.wgt_graphCoordRow.GetValue()
        if self.whichPlot_rowCoord == ':':
            self.whichPlot_rowCoord = [0,0]
        else:
            try:
                self.whichPlot_rowCoord = self.whichPlot_rowCoord.split(':')
                self.whichPlot_rowCoord = [int(i) for i in self.whichPlot_rowCoord]
            except:
                pass

        self.whichPlot_colCoord = self.wgt_graphCoordCol.GetValue()
        if self.whichPlot_colCoord == ':':
            self.whichPlot_colCoord = [0,0]
        else:
            try:
                self.whichPlot_colCoord = self.whichPlot_colCoord.split(':')
                self.whichPlot_colCoord = [int(i) for i in self.whichPlot_colCoord]
            except:
                pass

        self.canvas.draw()
        self.canvas.Refresh()

        #self.figure.clf() # THIS WORKS

        #### END ADDED FUNCTIONS

    def savePlot(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.toolbar.save_figure()
        event.Skip()

    def propertiesWindow(self, event):  # wxGlade: MyFramePlot.<event_handler>
        #print("Event handler 'propertiesWindow' not implemented!")
        event.Skip()

    def plotHome(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.toolbar.home()

        self.figure.subplots_adjust(left = self.orig_leftFrameMargin)
        self.figure.subplots_adjust(right = self.orig_rightFrameMargin)
        self.figure.subplots_adjust(top = self.orig_topFrameMargin)
        self.figure.subplots_adjust(bottom = self.orig_bottomFrameMargin)

        self.figure.subplots_adjust(hspace = self.orig_horizontalWidthFrameMargin)
        self.figure.subplots_adjust(wspace = self.orig_verticalWidthFrameMargin)        

        self.wgt_leftFrameMargin.SetValue(int(self.orig_leftFrameMargin*100))
        self.wgt_rightFrameMargin.SetValue(int(self.orig_rightFrameMargin*100))
        self.wgt_topFrameMargin.SetValue(int(self.orig_topFrameMargin*100))
        self.wgt_bottomFrameMargin.SetValue(int(self.orig_bottomFrameMargin*100))

        self.wgt_horizontalWidthFrameMargin.SetValue(int(self.orig_horizontalWidthFrameMargin*100))
        self.wgt_verticalWidthFrameMargin.SetValue(int(self.orig_verticalWidthFrameMargin*100))

        self.canvas.draw()
        event.Skip()

    def plotBackward(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.toolbar.back()
        event.Skip()

    def plotForward(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.toolbar.forward()
        event.Skip()

    def plotPan(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.toolbar.pan()
        event.Skip()

    def plotZoom(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.toolbar.zoom()
        event.Skip()

    def plotSave(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.toolbar.save_figure()
        event.Skip()

    def topFrameMargin(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.figure.subplots_adjust(top = self.wgt_topFrameMargin.GetValue()/100)
        self.canvas.draw()
        self.canvas.Refresh()
        event.Skip()

    def leftFrameMargin(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.figure.subplots_adjust(left = self.wgt_leftFrameMargin.GetValue()/100)
        self.canvas.draw()
        self.canvas.Refresh()
        event.Skip()

    def rightFrameMargin(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.figure.subplots_adjust(right = self.wgt_rightFrameMargin.GetValue()/100)
        self.canvas.draw()
        self.canvas.Refresh()
        event.Skip()

    def bottomFrameMargin(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.figure.subplots_adjust(bottom = self.wgt_bottomFrameMargin.GetValue()/100)
        self.canvas.draw()
        self.canvas.Refresh()
        event.Skip()

    def horizontalWidthFrameMargin(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.figure.subplots_adjust(hspace = self.wgt_horizontalWidthFrameMargin.GetValue()/100)
        self.canvas.draw()
        self.canvas.Refresh()
        event.Skip()

    def verticalWidthFrameMargin(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.figure.subplots_adjust(wspace= self.wgt_verticalWidthFrameMargin.GetValue()/100)
        self.canvas.draw()
        self.canvas.Refresh()
        event.Skip()

    def colorFrameBackground(self, event):  # wxGlade: MyFramePlot.<event_handler>
        dlg = wx.ColourDialog(self)
 
        # Ensure the full colour dialog is displayed, 
        # not the abbreviated version.
        dlg.GetColourData().SetChooseFull(True)
        
        if dlg.ShowModal() == wx.ID_OK:
            data = dlg.GetColourData()
            hexcolorFig = '#%02x%02x%02x' % data.GetColour()[:-1]

            r = data.GetColour()[0]
            b = data.GetColour()[1]
            g = data.GetColour()[2]

            self.figure.patch.set_facecolor(hexcolorFig) # Edited for each button
            self.canvas.draw()
            self.canvas.Refresh()

            self.wgt_colorFrameBackground.SetBackgroundColour(wx.Colour(r, b, g)) # Edited for each button
        
        dlg.Destroy()
        event.Skip()

    def alphaFrameBackground(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.figure.patch.set_alpha(self.wgt_alphaFrameBackground.GetValue()/100)

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphGridArrayRow(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.nrows = str(self.wgt_graphGridArrayRow.GetValue())
        
        try:
            self.height_ratios = [1]*int(self.nrows)
            ## resetting the grid properties
            self.gs = gridspec.GridSpec(nrows=int(self.nrows), ncols=int(self.ncols),\
            width_ratios=self.width_ratios, height_ratios=self.height_ratios)
        except ValueError:
            pass  # do nothing!
        
        self.wgt_graphHeightRatio.SetValue(":".join(map(str,self.height_ratios)))

        event.Skip()

    def graphGridArrayCol(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.ncols = str(self.wgt_graphGridArrayCol.GetValue())

        try:
            self.width_ratios = [1]*int(self.ncols)
            ## resetting the grid properties
            self.gs = gridspec.GridSpec(nrows=int(self.nrows), ncols=int(self.ncols),\
            width_ratios=self.width_ratios, height_ratios=self.height_ratios)
        except ValueError:
            pass  # do nothing!

        self.wgt_graphWidthRatio.SetValue(":".join(map(str,self.width_ratios)))

        event.Skip()

    def graphWidthRatio(self, event):  # wxGlade: MyFramePlot.<event_handler>

        self.width_ratios = self.wgt_graphWidthRatio.GetValue()
        if self.width_ratios == ':':
            self.width_ratios = [1]
        else:
            try:
                self.width_ratios = self.width_ratios.split(':')
                self.width_ratios = [int(i) for i in self.width_ratios]
            except:
                pass

        try:
            ## resetting the grid properties
            self.gs = gridspec.GridSpec(nrows=int(self.nrows), ncols=int(self.ncols),\
            width_ratios=self.width_ratios, height_ratios=self.height_ratios)
        except ValueError:
            pass  # do nothing!

        event.Skip()

    def graphHeightRatio(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.height_ratios = self.wgt_graphHeightRatio.GetValue()
        if self.height_ratios == ':':
            self.height_ratios = [1]
        else:
            try:
                self.height_ratios = self.height_ratios.split(':')
                self.height_ratios = [int(i) for i in self.height_ratios]
            except:
                pass

        try:
            ## resetting the grid properties
            self.gs = gridspec.GridSpec(nrows=int(self.nrows), ncols=int(self.ncols),\
            width_ratios=self.width_ratios, height_ratios=self.height_ratios)
        except ValueError:
            pass  # do nothing!

        event.Skip()

    def graphPlotNo(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.wgt_graphPlotNo.Set(self.plotNoList)
        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()

        try:
            # Need to put it as dictionary keys into list
            keysPlot = list(self.plotList[self.whichPlotNo].keys())
            self.wgt_graphDataCheckListPlot.Set(keysPlot)

        except:
            pass

        listGetBbox = self.ax[self.whichPlotNo].get_position()

        listShowBbox = str(listGetBbox.x0)+':'+\
        str(listGetBbox.y0)+':'+str(listGetBbox.x1)+':'+\
        str(listGetBbox.y1)

        self.wgt_graphAxesLinePos.SetValue(listShowBbox) 

        event.Skip()

    def graphPlotNoAdd(self, event):  # wxGlade: MyFramePlot.<event_handler>

        if self.plotNoList == []:
            self.plotNoList.append('1')
        else:
            self.plotNoList.append(str(int(self.plotNoList[-1])+1))

        self.wgt_graphPlotNo.Set(self.plotNoList)
        self.wgt_graphPlotNo.SetValue(self.plotNoList[-1])

        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()

        self.ax[self.whichPlotNo] = \
        self.figure.add_subplot(self.gs[self.whichPlot_rowCoord[0]:self.whichPlot_rowCoord[1]+1,\
            self.whichPlot_colCoord[0]:self.whichPlot_colCoord[1]+1])

        self.canvas.draw()
        self.canvas.Refresh()

        # Add empty dictionary to control plot, plot filled and error object
        self.plotList[self.whichPlotNo] = {}

        ## filled plot
        self.plotFillList[self.whichPlotNo] = {}
        self.plotFillColorList[self.whichPlotNo] = {}

        ## error plot
        self.plotErrorList[self.whichPlotNo] = {}
        self.plotErrorColorList[self.whichPlotNo] = {}

        ## legend control
        self.plotLegendList[self.whichPlotNo] = {}


        listGetBbox = self.ax[self.whichPlotNo].get_position()

        listShowBbox = str(listGetBbox.x0)+':'+\
        str(listGetBbox.y0)+':'+str(listGetBbox.x1)+':'+\
        str(listGetBbox.y1)

        self.wgt_graphAxesLinePos.SetValue(listShowBbox) 

        event.Skip()

    def graphPlotNoRemove(self, event):  # wxGlade: MyFramePlot.<event_handler>
        removePlotNo = self.wgt_graphPlotNo.GetValue()

        if self.plotNoList == []:
            pass
        elif removePlotNo == '':
            pass
        else:
            self.wgt_graphPlotNo.SetValue('')
            self.plotNoList.remove(removePlotNo)
            self.wgt_graphPlotNo.Set(self.plotNoList)

            try:
                self.figure.delaxes(self.ax[removePlotNo])
                self.plotList[removePlotNo] = {}

                self.canvas.draw()
                self.canvas.Refresh()

            except ValueError:
                pass  # do nothing!

        event.Skip()

    def graphCoordRow(self, event):  # wxGlade: MyFramePlot.<event_handler>
        ## setting the plot position in list position form
        self.whichPlot_rowCoord = self.wgt_graphCoordRow.GetValue()
        if self.whichPlot_rowCoord == ':':
            self.whichPlot_rowCoord = [0,0]

        elif (':' in self.whichPlot_rowCoord) is True:
            try:
                self.whichPlot_rowCoord = self.whichPlot_rowCoord.split(':')
                self.whichPlot_rowCoord = [int(i) for i in self.whichPlot_rowCoord if i != '']
            except:
                pass

        else:
            try:
                self.whichPlot_rowCoord = \
                [int(self.whichPlot_rowCoord),int(self.whichPlot_rowCoord)]
            except:
                pass

        event.Skip()

    def graphCoordCol(self, event):  # wxGlade: MyFramePlot.<event_handler>
        ## setting the plot position in list position form
        self.whichPlot_colCoord = self.wgt_graphCoordCol.GetValue()
        if self.whichPlot_colCoord == ':':
            self.whichPlot_colCoord = [0,0]
        elif (':' in self.whichPlot_colCoord) is True:
            try:
                self.whichPlot_colCoord = self.whichPlot_colCoord.split(':')
                self.whichPlot_colCoord = [int(i) for i in self.whichPlot_colCoord if i != '']
            except:
                pass
        else:
            try:
                self.whichPlot_colCoord = \
                [int(self.whichPlot_colCoord),int(self.whichPlot_colCoord)]
            except:
                pass

        event.Skip()

    def graphAxesSpine(self, event):  # wxGlade: MyFramePlot.<event_handler>
        
        self.whichAxesSpine = self.wgt_graphAxesSpine.GetValue()

        event.Skip()

    def graphAxesScale(self, event):  # wxGlade: MyFramePlot.<event_handler>
        
        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        whichAxesSpine = self.wgt_graphAxesSpine.GetValue()
        axesScale = self.wgt_graphAxesScale.GetValue()

        if whichAxesSpine == 'x':
            if axesScale == True:
                self.ax[self.whichPlotNo].set_xscale('log')
                self.wgt_graphAxesScale.SetValue(True)
            else:
                self.ax[self.whichPlotNo].set_xscale('linear')
                self.wgt_graphAxesScale.SetValue(False)
        elif whichAxesSpine == 'y':
            if axesScale == True:
                self.ax[self.whichPlotNo].set_yscale('log')
                self.wgt_graphAxesScale.SetValue(True)
            else:
                self.ax[self.whichPlotNo].set_yscale('linear')
                self.wgt_graphAxesScale.SetValue(False)
        elif whichAxesSpine == 'all':
            if axesScale == True:
                self.ax[self.whichPlotNo].set_xscale('log')
                self.ax[self.whichPlotNo].set_yscale('log')
                self.wgt_graphAxesScale.SetValue(True)
            else:
                self.ax[self.whichPlotNo].set_xscale('linear')
                self.ax[self.whichPlotNo].set_yscale('linear')
                self.wgt_graphAxesScale.SetValue(False)
        else:
            pass

        self.canvas.draw()
        self.canvas.Refresh()
        event.Skip()

    def graphAxesMin(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        whichAxesSpine = self.wgt_graphAxesSpine.GetValue()

        axesMin = self.wgt_graphAxesMin.GetValue()
        axesMax = self.wgt_graphAxesMax.GetValue()
        
        try:
            axesMin = float(axesMin)
        except:
            axesMin = ':'

        try:
            axesMax = float(axesMax)
        except:
            axesMax = ':'        

        if whichAxesSpine == 'x':
            if axesMin == ':' and axesMax == ':':
                self.ax[self.whichPlotNo].set_xlim(None,None)
            elif axesMin == ':' and axesMax != ':':
                self.ax[self.whichPlotNo].set_xlim(None,axesMax)
            elif axesMin != ':' and axesMax == ':':
                self.ax[self.whichPlotNo].set_xlim(axesMin,None)
            else:
                self.ax[self.whichPlotNo].set_xlim(axesMin,axesMax)
        elif whichAxesSpine == 'y':
            if axesMin == ':' and axesMax == ':':
                self.ax[self.whichPlotNo].set_ylim(None,None)
            elif axesMin == ':' and axesMax != ':':
                self.ax[self.whichPlotNo].set_ylim(None,axesMax)
            elif axesMin != ':' and axesMax == ':':
                self.ax[self.whichPlotNo].set_ylim(axesMin,None)
            else:
                self.ax[self.whichPlotNo].set_ylim(axesMin,axesMax)

        self.canvas.draw()
        self.canvas.Refresh()
        event.Skip()

    def graphAxesMax(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        whichAxesSpine = self.wgt_graphAxesSpine.GetValue()

        axesMin = self.wgt_graphAxesMin.GetValue()
        axesMax = self.wgt_graphAxesMax.GetValue()
        
        try:
            axesMin = float(axesMin)
        except:
            axesMin = ':'

        try:
            axesMax = float(axesMax)
        except:
            axesMax = ':'        

        if whichAxesSpine == 'x':
            if axesMin == ':' and axesMax == ':':
                self.ax[self.whichPlotNo].set_xlim(None,None)
            elif axesMin == ':' and axesMax != ':':
                self.ax[self.whichPlotNo].set_xlim(None,axesMax)
            elif axesMin != ':' and axesMax == ':':
                self.ax[self.whichPlotNo].set_xlim(axesMin,None)
            else:
                self.ax[self.whichPlotNo].set_xlim(axesMin,axesMax)

        elif whichAxesSpine == 'y':
            if axesMin == ':' and axesMax == ':':
                self.ax[self.whichPlotNo].set_ylim(None,None)
            elif axesMin == ':' and axesMax != ':':
                self.ax[self.whichPlotNo].set_ylim(None,axesMax)
            elif axesMin != ':' and axesMax == ':':
                self.ax[self.whichPlotNo].set_ylim(axesMin,None)
            else:
                self.ax[self.whichPlotNo].set_ylim(axesMin,axesMax)
        
        self.canvas.draw()
        self.canvas.Refresh()
        event.Skip()

    def graphAxesLineColor(self, event):  # wxGlade: MyFramePlot.<event_handler>

        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()

        dlg = wx.ColourDialog(self)
 
        # Ensure the full colour dialog is displayed, 
        # not the abbreviated version.
        dlg.GetColourData().SetChooseFull(True)
        
        if dlg.ShowModal() == wx.ID_OK:
            data = dlg.GetColourData()
            hexcolorPlot = '#%02x%02x%02x' % data.GetColour()[:-1]

            r = data.GetColour()[0]
            b = data.GetColour()[1]
            g = data.GetColour()[2]

            for spine in self.spineName:
                self.ax[self.whichPlotNo].spines[spine].set_color(hexcolorPlot)

            self.wgt_graphAxesLineColor.SetBackgroundColour(wx.Colour(r, b, g)) # Edited for each button
        
            self.canvas.draw()
            self.canvas.Refresh()

        dlg.Destroy()
        event.Skip()

    def graphAxesLinePos(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()

        listBbox = []
        listAxesLinePos = self.wgt_graphAxesLinePos.GetValue().split(':')

        if len(listAxesLinePos) == 4:
            for i,j in enumerate(listAxesLinePos):
                try:
                    k = float(j)
                    listBbox = listBbox+[k]
                except:
                    k = 0.5
                    listBbox = listBbox+[k]

            listBbox = [listBbox[0],listBbox[1],\
            listBbox[2]-listBbox[0],listBbox[3]-listBbox[1]]

            self.ax[self.whichPlotNo].set_position(listBbox)

        else:
            pass

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphAxesLineWidth(self, event):  # wxGlade: MyFramePlot.<event_handler>
        
        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        lineWidth = (self.wgt_graphAxesLineWidth.GetValue())

        try:
            lineWidth = float(lineWidth)
        except:
            lineWidth = 0.5

        for spine in self.spineName:
            self.ax[self.whichPlotNo].spines[spine].set_linewidth(lineWidth)

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphAxesLineStyle(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        lineStyle = self.wgt_graphAxesLineStyle.GetValue()

        for spine in self.spineName:
            self.ax[self.whichPlotNo].spines[spine].set_linestyle(lineStyle)

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphAxesLineAlpha(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        lineAlpha = (self.wgt_graphAxesLineAlpha.GetValue())/100

        for spine in self.spineName:
            self.ax[self.whichPlotNo].spines[spine].set_alpha(lineAlpha)

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphAxesLabelText(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        whichAxesSpine = self.wgt_graphAxesSpine.GetValue()

        axesLabelText = self.wgt_graphAxesLabelText.GetValue()


        if whichAxesSpine == 'x':
            self.ax[self.whichPlotNo].set_xlabel(axesLabelText)
        elif whichAxesSpine == 'y':
            self.ax[self.whichPlotNo].set_ylabel(axesLabelText)

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphAxesLabelFont(self, event):  # wxGlade: MyFramePlot.<event_handler>

        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        whichAxesSpine = self.wgt_graphAxesSpine.GetValue()
        axesLabelText = self.wgt_graphAxesLabelText.GetValue()

        dlgFont = wx.FontDialog(self,wx.FontData())
        if dlgFont.ShowModal() == wx.ID_OK:
            data = dlgFont.GetFontData()
            font = data.GetChosenFont()

            fontFace = font.GetFaceName() # Font name
            fontFeatures = font.GetNativeFontInfoDesc().replace(font.GetFaceName(),'').split()

            fontWeight = 'normal'
            fontStyle = 'normal'
            fontSize = 12

            if len(fontFeatures) == 3:
                fontWeight = fontFeatures[0].lower()
                fontStyle = fontFeatures[1].lower()
                fontSize = fontFeatures[-1]
            elif len(fontFeatures) == 2:
                fontSize = fontFeatures[-1]
                if fontFeatures[0] == 'Bold':
                    fontWeight = fontFeatures[0].lower()
                else:
                    fontStyle = fontFeatures[0].lower()
            else:
                fontSize = fontFeatures[-1]

        if whichAxesSpine == 'x':
            self.ax[self.whichPlotNo].set_xlabel(axesLabelText,\
                fontname = fontFace, fontsize = int(fontSize),\
                fontstyle = fontStyle, fontweight = fontWeight)
        elif whichAxesSpine == 'y':
            self.ax[self.whichPlotNo].set_ylabel(axesLabelText,\
                fontname = fontFace, fontsize = int(fontSize),\
                fontstyle = fontStyle, fontweight = fontWeight)

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphAxesLabelColor(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        whichAxesSpine = self.wgt_graphAxesSpine.GetValue()

        dlg = wx.ColourDialog(self)
 
        # Ensure the full colour dialog is displayed, 
        # not the abbreviated version.
        dlg.GetColourData().SetChooseFull(True)
        
        if dlg.ShowModal() == wx.ID_OK:
            data = dlg.GetColourData()
            hexcolorLabel = '#%02x%02x%02x' % data.GetColour()[:-1]

            r = data.GetColour()[0]
            b = data.GetColour()[1]
            g = data.GetColour()[2]

            #self.figure.patch.set_facecolor(hexcolorFig) # Edited for each button
            if whichAxesSpine == 'x':
                self.ax[self.whichPlotNo].xaxis.label.set_color(hexcolorLabel)
            elif whichAxesSpine == 'y':
                self.ax[self.whichPlotNo].yaxis.label.set_color(hexcolorLabel)
            #self.wgt_graphAxesLineColor.SetBackgroundColour(wx.Colour(r, b, g)) # Edited for each button
        
            self.canvas.draw()
            self.canvas.Refresh()
        event.Skip()

    def graphAxesLabelPos(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        whichAxesSpine = self.wgt_graphAxesSpine.GetValue()

        axesLabelPos = self.wgt_graphAxesLabelPos.GetValue().split(',')

        try:
            axesLabelPosX = float(axesLabelPos[0])        
            axesLabelPosY = float(axesLabelPos[1])
            if whichAxesSpine == 'x':
                self.ax[self.whichPlotNo].xaxis.\
                set_label_coords(axesLabelPosX,axesLabelPosY)
            elif whichAxesSpine == 'y':
                self.ax[self.whichPlotNo].yaxis.\
                set_label_coords(axesLabelPosX,axesLabelPosY)
        except:
            pass
        
        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphAxesLabelRot(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        whichAxesSpine = self.wgt_graphAxesSpine.GetValue()

        try:        
            axesLabelRot = float(self.wgt_graphAxesLabelRot.GetValue())

            if whichAxesSpine == 'x':
                self.ax[self.whichPlotNo].xaxis.label.set_rotation(axesLabelRot)
            elif whichAxesSpine == 'y':
                self.ax[self.whichPlotNo].yaxis.label.set_rotation(axesLabelRot)

        except:
            pass
        
        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphAxesLabelAlpha(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        whichAxesSpine = self.wgt_graphAxesSpine.GetValue()
        axesLabelText = self.wgt_graphAxesLabelText.GetValue()

        axesLabelAlpha = (self.wgt_graphAxesLabelAlpha.GetValue())/100

        if whichAxesSpine == 'x':
            self.ax[self.whichPlotNo].xaxis.label.set_alpha(axesLabelAlpha)
        elif whichAxesSpine == 'y':
            self.ax[self.whichPlotNo].yaxis.label.set_alpha(axesLabelAlpha)

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphAxesTickWhich(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        whichAxesSpine = self.wgt_graphAxesSpine.GetValue()
        axesTickWhich = self.wgt_graphAxesTickWhich.GetValue()

        event.Skip()

    def graphAxesTickColor(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        whichAxesSpine = self.wgt_graphAxesSpine.GetValue()
        axesTickWhich = self.wgt_graphAxesTickWhich.GetValue()

        dlg = wx.ColourDialog(self)
 
        # Ensure the full colour dialog is displayed, 
        # not the abbreviated version.
        dlg.GetColourData().SetChooseFull(True)
        
        if dlg.ShowModal() == wx.ID_OK:
            data = dlg.GetColourData()
            hexcolorTick = '#%02x%02x%02x' % data.GetColour()[:-1]

            r = data.GetColour()[0]
            b = data.GetColour()[1]
            g = data.GetColour()[2]

            self.ax[self.whichPlotNo].tick_params(axis=whichAxesSpine,\
                which=axesTickWhich, color=hexcolorTick)

        self.canvas.draw()
        self.canvas.Refresh()
        event.Skip()

    def graphAxesTickDirection(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        whichAxesSpine = self.wgt_graphAxesSpine.GetValue()
        axesTickWhich = self.wgt_graphAxesTickWhich.GetValue()

        axesTickDirection = self.wgt_graphAxesTickDirection.GetValue()
        if axesTickDirection == 'in & out':
            axesTickDirection = 'inout'

        self.ax[self.whichPlotNo].tick_params(axis=whichAxesSpine,\
            which=axesTickWhich, direction=axesTickDirection)

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphAxesTickLength(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        whichAxesSpine = self.wgt_graphAxesSpine.GetValue()
        axesTickWhich = self.wgt_graphAxesTickWhich.GetValue()

        axesTickLength = float(self.wgt_graphAxesTickLength.GetValue())

        self.ax[self.whichPlotNo].tick_params(axis=whichAxesSpine,\
            which=axesTickWhich, length=axesTickLength)

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphAxesTickWidth(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        whichAxesSpine = self.wgt_graphAxesSpine.GetValue()
        axesTickWhich = self.wgt_graphAxesTickWhich.GetValue()

        axesTickWidth = float(self.wgt_graphAxesTickWidth.GetValue())

        try:
            self.ax[self.whichPlotNo].tick_params(axis=whichAxesSpine,\
                which=axesTickWhich, width=axesTickWidth)
        except:
            pass        

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphAxesTickFont(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        whichAxesSpine = self.wgt_graphAxesSpine.GetValue()
        axesTickWhich = self.wgt_graphAxesTickWhich.GetValue()

        dlgFont = wx.FontDialog(self,wx.FontData())
        if dlgFont.ShowModal() == wx.ID_OK:
            data = dlgFont.GetFontData()
            font = data.GetChosenFont()

            fontFace = font.GetFaceName() # Font name
            fontFeatures = font.GetNativeFontInfoDesc().replace(font.GetFaceName(),'').split()

            fontWeight = 'normal'
            fontStyle = 'normal'
            fontSize = 12

            if len(fontFeatures) == 3:
                fontWeight = fontFeatures[0].lower()
                fontStyle = fontFeatures[1].lower()
                fontSize = fontFeatures[-1]
            elif len(fontFeatures) == 2:
                fontSize = fontFeatures[-1]
                if fontFeatures[0] == 'Bold':
                    fontWeight = fontFeatures[0].lower()
                else:
                    fontStyle = fontFeatures[0].lower()
            else:
                fontSize = fontFeatures[-1]

        if axesTickWhich=='minor':
            minorTrue = True
        else:
            minorTrue = False
        try:
            if whichAxesSpine == 'x':
                tickLabelX = self.ax[self.whichPlotNo].get_xticklabels(which=axesTickWhich)
                self.ax[self.whichPlotNo].set_xticklabels(tickLabelX,minor=minorTrue,\
                    fontname = fontFace, fontsize = int(fontSize),\
                    fontstyle = fontStyle, fontweight = fontWeight)
            elif whichAxesSpine == 'y':
                tickLabelY = self.ax[self.whichPlotNo].get_yticklabels(which=axesTickWhich)
                self.ax[self.whichPlotNo].set_yticklabels(tickLabelY,minor=minorTrue,\
                    fontname = fontFace, fontsize = int(fontSize),\
                    fontstyle = fontStyle, fontweight = fontWeight)
        except:
            pass

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphAxesTickFontColor(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        whichAxesSpine = self.wgt_graphAxesSpine.GetValue()
        axesTickWhich = self.wgt_graphAxesTickWhich.GetValue()

        dlg = wx.ColourDialog(self)
 
        # Ensure the full colour dialog is displayed, 
        # not the abbreviated version.
        dlg.GetColourData().SetChooseFull(True)
        
        if dlg.ShowModal() == wx.ID_OK:
            data = dlg.GetColourData()
            hexcolorTick = '#%02x%02x%02x' % data.GetColour()[:-1]

            r = data.GetColour()[0]
            b = data.GetColour()[1]
            g = data.GetColour()[2]

            self.ax[self.whichPlotNo].tick_params(axis=whichAxesSpine,\
                which=axesTickWhich, labelcolor=hexcolorTick)

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()
        event.Skip()

    def graphAxesTickPad(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        whichAxesSpine = self.wgt_graphAxesSpine.GetValue()
        axesTickWhich = self.wgt_graphAxesTickWhich.GetValue()

        axesTickPad = float(self.wgt_graphAxesTickPad.GetValue())

        try:
            self.ax[self.whichPlotNo].tick_params(axis=whichAxesSpine,\
                which=axesTickWhich, pad=axesTickPad)
        except:
            pass

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphAxesTickRotation(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        whichAxesSpine = self.wgt_graphAxesSpine.GetValue()
        axesTickWhich = self.wgt_graphAxesTickWhich.GetValue()

        axesTickRotation = float(self.wgt_graphAxesTickRotation.GetValue())

        try:
            self.ax[self.whichPlotNo].tick_params(axis=whichAxesSpine,\
                which=axesTickWhich, labelrotation=axesTickRotation)
        except:
            pass

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphAxesTickAlpha(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        whichAxesSpine = self.wgt_graphAxesSpine.GetValue()
        axesTickWhich = self.wgt_graphAxesTickWhich.GetValue()

        axesTickAlpha = (self.wgt_graphAxesTickAlpha.GetValue())/100

        if axesTickWhich=='minor':
            minorTrue = True
        else:
            minorTrue = False
        try:
            if whichAxesSpine == 'x':
                tickLabelX = self.ax[self.whichPlotNo].get_xticklabels(which=axesTickWhich)
                self.ax[self.whichPlotNo].set_xticklabels(tickLabelX,minor=minorTrue,\
                    alpha=axesTickAlpha)
            elif whichAxesSpine == 'y':
                tickLabelX = self.ax[self.whichPlotNo].get_yticklabels(which=axesTickWhich)
                self.ax[self.whichPlotNo].set_yticklabels(tickLabelTextY,minor=minorTrue,\
                    alpha=axesTickAlpha)
        except:
            pass

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphAxesGridWhich(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        whichAxesSpine = self.wgt_graphAxesSpine.GetValue()

        axesGridWhich = self.wgt_graphAxesGridWhich.GetValue()

        self.ax[self.whichPlotNo].grid(b=True, axis=whichAxesSpine, which=axesGridWhich)

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphAxesGridColor(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        whichAxesSpine = self.wgt_graphAxesSpine.GetValue()
        axesGridWhich = self.wgt_graphAxesGridWhich.GetValue()

        dlg = wx.ColourDialog(self)
 
        # Ensure the full colour dialog is displayed, 
        # not the abbreviated version.
        dlg.GetColourData().SetChooseFull(True)
        
        if dlg.ShowModal() == wx.ID_OK:
            data = dlg.GetColourData()
            hexcolorGrid = '#%02x%02x%02x' % data.GetColour()[:-1]

            r = data.GetColour()[0]
            b = data.GetColour()[1]
            g = data.GetColour()[2]

            self.ax[self.whichPlotNo].grid(b=True, axis=whichAxesSpine,\
                which=axesGridWhich, color=hexcolorGrid)

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphAxesGridStyle(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        whichAxesSpine = self.wgt_graphAxesSpine.GetValue()
        axesGridWhich = self.wgt_graphAxesGridWhich.GetValue()

        axesGridStyle = self.wgt_graphAxesGridStyle.GetValue()

        self.ax[self.whichPlotNo].grid(b=True, axis=whichAxesSpine,\
            which=axesGridWhich, linestyle=axesGridStyle)

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphAxesGridWidth(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        whichAxesSpine = self.wgt_graphAxesSpine.GetValue()
        axesGridWhich = self.wgt_graphAxesGridWhich.GetValue()

        try:
            axesGridWidth = float(self.wgt_graphAxesGridWidth.GetValue())
        except:
            pass

        self.ax[self.whichPlotNo].grid(b=True, axis=whichAxesSpine,\
            which=axesGridWhich, linewidth=axesGridWidth)

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphAxesGridAlpha(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        whichAxesSpine = self.wgt_graphAxesSpine.GetValue()
        axesGridWhich = self.wgt_graphAxesGridWhich.GetValue()

        axesGridAlpha = (self.wgt_graphAxesGridAlpha.GetValue())/100

        self.ax[self.whichPlotNo].grid(b=True, axis=whichAxesSpine,\
            which=axesGridWhich, alpha=axesGridAlpha)

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphDataSheet(self, event):  # wxGlade: MyFramePlot.<event_handler>
        # At the moment it is not allowed to plot data column from different sheet
        
        self.wgt_graphDataX.SetValue('')
        self.wgt_graphDataY.SetValue('')

        self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        self.whichSheet = self.wgt_graphDataSheet.GetValue()

        event.Skip()

        try:
            # for x data
            keysX = list(self.data[self.whichSheet].keys())
            self.wgt_graphDataX.Set(keysX)
            self.wgt_graphDataErrorX.Set(keysX) 
            # for y data
            keysY = list(self.data[self.whichSheet].keys())
            self.wgt_graphDataY.Set(keysY)
            self.wgt_graphDataErrorY.Set(keysY)
        except:
            pass
            ##print ('No data')

    def graphDataType(self, event):  # wxGlade: MyFramePlot.<event_handler>
        #print("Event handler 'graphDataType' not implemented!")
        event.Skip()

    def graphDataX(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.whichSheet = self.wgt_graphDataSheet.GetValue()
        self.whichDataX = self.wgt_graphDataX.GetValue()
        
        self.dataX = self.data[self.whichSheet][self.whichDataX]

        event.Skip()

    def graphDataY(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.whichSheet = self.wgt_graphDataSheet.GetValue()
        self.whichDataY = self.wgt_graphDataY.GetValue()
        
        self.dataY = self.data[self.whichSheet][self.whichDataY]

        event.Skip()

    def graphDataWhichY(self, event):  # wxGlade: MyFramePlot.<event_handler>
        dataWhichY = self.wgt_graphDataWhichY.GetValue()
        event.Skip()

    def graphDataKeyText(self, event):  # wxGlade: MyFramePlot.<event_handler>

        strSheet = self.wgt_graphDataSheet.GetValue()
        strX = self.wgt_graphDataX.GetValue().replace(' to ',':')
        strY = self.wgt_graphDataY.GetValue().replace(' to ',':')

        legendRefer = strSheet+' <'+strX+' vs. '+strY+'>'

        dataKeyText = self.wgt_graphDataKeyText.GetValue()

        self.plotLegendList[self.whichPlotNo][legendRefer] = dataKeyText

        #dataKeyText = self.wgt_graphDataKeyText.GetValue()

        #self.plotLegendList = 

        event.Skip()

    def graphDataCheckListPlot(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.lineColorDict = {}
        self.markerFaceColorDict = {}

        self.checkWhat = self.wgt_graphDataCheckListPlot.GetCheckedStrings()

        for l in self.checkWhat:
            try:
                rgb_line_ori = self.plotList[self.whichPlotNo][l].get_color()[1:]
                print (rgb_line_ori)
                rgb_line = tuple(int(rgb_line_ori[i:i+2], 16) for i in (0, 2, 4))
                self.lineColorDict[l]=rgb_line
            except:
                rgb_line = self.plotList[self.whichPlotNo][l].get_color()
                self.lineColorDict[l]=\
                (int(rgb_line[0]*255),int(rgb_line[1]*255),int(rgb_line[2]*255))

        for l in self.checkWhat:
            try:
                # MARKER
                rgb_marker_ori = self.plotList[self.whichPlotNo][l].get_markerfacecolor()[1:]
                rgb_marker = tuple(int(rgb_marker_ori[i:i+2], 16) for i in (0, 2, 4))
                self.markerFaceColorDict[l]=rgb_marker

            except:

                # MARKER
                rgb_marker = self.plotList[self.whichPlotNo][l].get_markerfacecolor()
                self.markerFaceColorDict[l]=\
                (int(rgb_marker[0]*255),int(rgb_marker[1]*255),int(rgb_marker[2]*255))

        event.Skip()

    def graphDataAddPlot(self, event):  # wxGlade: MyFramePlot.<event_handler>

        try:
            strSheet = self.wgt_graphDataSheet.GetValue()
            strX = self.wgt_graphDataX.GetValue().replace(' to ',':')
            strY = self.wgt_graphDataY.GetValue().replace(' to ',':')

            plotRefer = strSheet+' <'+strX+' vs. '+strY+'>'

            self.ax[self.whichPlotNo].plot(self.dataX,self.dataY)

            self.plotList[self.whichPlotNo][plotRefer] = \
            self.ax[self.whichPlotNo].lines[-1]



            # Need to put it as dictionary keys into list
            keysPlot = list(self.plotList[self.whichPlotNo].keys())

            self.wgt_graphDataCheckListPlot.Set(keysPlot)

        except:
            pass

        self.ax[self.whichPlotNo].legend()

        self.canvas.draw()
        self.canvas.Refresh() 

        event.Skip()

    def graphDataHidePlot(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.checkWhat = self.wgt_graphDataCheckListPlot.GetCheckedStrings()

        for l in self.ax[self.whichPlotNo].lines:
            l.set_visible(True)

        try:
            for l in self.checkWhat:
                self.plotList[self.whichPlotNo][l].set_visible(False)
        except:
            pass

        self.ax[self.whichPlotNo].legend()

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphDataRemovePlot(self, event):  # wxGlade: MyFramePlot.<event_handler>
        '''self.dataRemovePlot = self.wgt_wgt_graphDataCheckListPlot.GetCheckedStrings()

        for l in self.ax[self.whichPlotNo].lines:
                    l.set_alpha(1.0)

        try:
            for l in self.checkWhat:
                self.plotList[self.whichPlotNo][l].set_alpha(0.0)
        except:
            pass

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()'''
        event.Skip()

    def graphDataLineColor(self, event):  # wxGlade: MyFramePlot.<event_handler>
        '''self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        whichAxesSpine = self.wgt_graphAxesSpine.GetValue()
        axesGridWhich = self.wgt_graphAxesGridWhich.GetValue()'''
        #self.whichPlotNo = self.wgt_graphPlotNo.GetValue()
        checkWhat = self.wgt_graphDataCheckListPlot.GetCheckedStrings()
        dataLineAlpha = (self.wgt_graphDataLineAlpha.GetValue())/100

        dlg = wx.ColourDialog(self)
 
        # Ensure the full colour dialog is displayed, 
        # not the abbreviated version.
        dlg.GetColourData().SetChooseFull(True)
        
        if dlg.ShowModal() == wx.ID_OK:
            data = dlg.GetColourData()
            hexcolorLine = '#%02x%02x%02x' % data.GetColour()[:-1]

            r = data.GetColour()[0]
            b = data.GetColour()[1]
            g = data.GetColour()[2]

            try:
                for l in self.checkWhat:
                    self.lineColorDict[l] = (r,b,g)
                    self.plotList[self.whichPlotNo][l].set_color((r/255,b/255,g/255,dataLineAlpha))
            except:
                pass

            self.ax[self.whichPlotNo].legend()

            self.canvas.draw()
            self.canvas.Refresh()

        event.Skip()

    def graphDataLineWidth(self, event):  # wxGlade: MyFramePlot.<event_handler>

        checkWhat = self.wgt_graphDataCheckListPlot.GetCheckedStrings()

        dataLineWidth = float(self.wgt_graphDataLineWidth.GetValue())

        try:
            for l in checkWhat:
                self.plotList[self.whichPlotNo][l].set_linewidth(dataLineWidth)
        except:
            pass

        self.ax[self.whichPlotNo].legend()

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphDataLineStyle(self, event):  # wxGlade: MyFramePlot.<event_handler>

        checkWhat = self.wgt_graphDataCheckListPlot.GetCheckedStrings()

        dataLineStyle = self.wgt_graphDataLineStyle.GetValue()

        try:
            for l in checkWhat:
                self.plotList[self.whichPlotNo][l].set_linestyle(dataLineStyle)
        except:
            pass

        self.ax[self.whichPlotNo].legend()

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphDataLineAlpha(self, event):  # wxGlade: MyFramePlot.<event_handler>

        dataLineAlpha = (self.wgt_graphDataLineAlpha.GetValue())/100

        for l in self.checkWhat:
            rgb = self.lineColorDict[l]
            self.plotList[self.whichPlotNo][l].set_color((rgb[0]/255,rgb[1]/255,rgb[2]/255,dataLineAlpha))

        self.ax[self.whichPlotNo].legend()

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphDataMarkerType(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.checkWhat = self.wgt_graphDataCheckListPlot.GetCheckedStrings()

        dataMarkerType = self.wgt_graphDataMarkerType.GetValue()

        try:
            for l in self.checkWhat:
                self.plotList[self.whichPlotNo][l].set_marker(self.markerDict[dataMarkerType])
        except:
            if dataMarkerType == True:
                dataMarkerType = '$'+dataMarkerType+'$'
            else:
                pass

        self.ax[self.whichPlotNo].legend()

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphDataMarkerSize(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.checkWhat = self.wgt_graphDataCheckListPlot.GetCheckedStrings()

        dataMarkerSize = float(self.wgt_graphDataMarkerSize.GetValue())

        try:
            for l in self.checkWhat:
                self.plotList[self.whichPlotNo][l].set_markersize(dataMarkerSize)
        except:
            pass

        self.ax[self.whichPlotNo].legend()

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphDataMarkerFaceColor(self, event):  # wxGlade: MyFramePlot.<event_handler>
        checkWhat = self.wgt_graphDataCheckListPlot.GetCheckedStrings()

        dlg = wx.ColourDialog(self)
 
        # Ensure the full colour dialog is displayed, 
        # not the abbreviated version.
        dlg.GetColourData().SetChooseFull(True)
        
        if dlg.ShowModal() == wx.ID_OK:
            data = dlg.GetColourData()
            hexcolorMarkerFace = '#%02x%02x%02x' % data.GetColour()[:-1]

            r = data.GetColour()[0]
            b = data.GetColour()[1]
            g = data.GetColour()[2]

            try:
                for l in self.checkWhat:
                    self.markerFaceColorDict[l] = (r,b,g)
                    self.plotList[self.whichPlotNo][l].set_markerfacecolor((r/255,b/255,g/255,1.0))
            except:
                pass

            self.ax[self.whichPlotNo].legend()

            self.canvas.draw()
            self.canvas.Refresh()

        event.Skip()

    def graphDataMarkerEdgeColor(self, event):  # wxGlade: MyFramePlot.<event_handler>
        checkWhat = self.wgt_graphDataCheckListPlot.GetCheckedStrings()
        dataMarkerAlpha = (self.wgt_graphDataMarkerAlpha.GetValue())/100

        dlg = wx.ColourDialog(self)
 
        # Ensure the full colour dialog is displayed, 
        # not the abbreviated version.
        dlg.GetColourData().SetChooseFull(True)
        
        if dlg.ShowModal() == wx.ID_OK:
            data = dlg.GetColourData()
            hexcolorMarkerEdge = '#%02x%02x%02x' % data.GetColour()[:-1]

            r = data.GetColour()[0]
            b = data.GetColour()[1]
            g = data.GetColour()[2]

            try:
                for l in self.checkWhat:
                    self.plotList[self.whichPlotNo][l].set_markeredgecolor((r/255,b/255,g/255,dataMarkerAlpha))
            except:
                pass

            self.ax[self.whichPlotNo].legend()

            self.canvas.draw()
            self.canvas.Refresh()

        event.Skip()

    def graphDataMarkerEdgeWidth(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.checkWhat = self.wgt_graphDataCheckListPlot.GetCheckedStrings()

        try:
            dataMarkerEdgeWidth = float(self.wgt_graphDataMarkerEdgeWidth.GetValue())
        except:
            pass
 
        try:
            for l in self.checkWhat:
                self.plotList[self.whichPlotNo][l].set_markeredgewidth(dataMarkerEdgeWidth)
        except:
            pass

        self.ax[self.whichPlotNo].legend()

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphDataMarkerAlpha(self, event):  # wxGlade: MyFramePlot.<event_handler>
        #self.checkWhat = self.wgt_graphDataCheckListPlot.GetCheckedStrings()

        dataMarkerAlpha = (self.wgt_graphDataMarkerAlpha.GetValue())/100


        for l in self.checkWhat:
            rgb = self.markerFaceColorDict[l]
            self.plotList[self.whichPlotNo][l].set_markerfacecolor((rgb[0]/255,rgb[1]/255,rgb[2]/255,dataMarkerAlpha))

        self.ax[self.whichPlotNo].legend()

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphDataFillColor(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.checkWhat = self.wgt_graphDataCheckListPlot.GetCheckedStrings()
        dataFillAlpha = (self.wgt_graphDataFillAlpha.GetValue())/100
        print (dataFillAlpha)

        try:
            for l in self.checkWhat:
                self.ax[self.whichPlotNo].collections.remove(self.plotFillList[self.whichPlotNo][l])
        except:
            pass

        dlg = wx.ColourDialog(self)
 
        # Ensure the full colour dialog is displayed, 
        # not the abbreviated version.
        dlg.GetColourData().SetChooseFull(True)
        
        if dlg.ShowModal() == wx.ID_OK:
            data = dlg.GetColourData()
            hexcolorDataFill = '#%02x%02x%02x' % data.GetColour()[:-1]

            for l in self.checkWhat:
                self.plotFillColorList[self.whichPlotNo][l] = hexcolorDataFill

            r = data.GetColour()[0]
            b = data.GetColour()[1]
            g = data.GetColour()[2]

            try:
                for l in self.checkWhat:
                    print (l+'filled')
                    xydata = self.plotList[self.whichPlotNo][l].get_xydata()
                    xf = xydata[:,0]; yf = xydata[:,1]                    
                    self.plotFillList[self.whichPlotNo][l] = self.ax[self.whichPlotNo].fill_between(xf,yf,\
                        color = self.plotFillColorList[self.whichPlotNo][l],\
                        alpha = dataFillAlpha)

            except:
                pass

            self.ax[self.whichPlotNo].legend()

            self.canvas.draw()
            self.canvas.Refresh()

        event.Skip()

    def graphDataFillAlpha(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.checkWhat = self.wgt_graphDataCheckListPlot.GetCheckedStrings()
        dataFillAlpha = (self.wgt_graphDataFillAlpha.GetValue())/100
        print (dataFillAlpha)

        try:
            for l in self.checkWhat:
                print (l+'filled')
                xydata = self.plotList[self.whichPlotNo][l].get_xydata()
                xf = xydata[:,0]; yf = xydata[:,1]
                #self.plotList[self.whichPlotNo][l+'filled'].remove()  
                self.ax[self.whichPlotNo].collections.remove(self.plotFillList[self.whichPlotNo][l])

                self.plotFillList[self.whichPlotNo][l] = self.ax[self.whichPlotNo].fill_between(xf,yf,\
                    color = self.plotFillColorList[self.whichPlotNo][l],\
                    alpha = dataFillAlpha)

        except:
            pass

        self.ax[self.whichPlotNo].legend()

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphDataErrorY(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.whichSheet = self.wgt_graphDataSheet.GetValue()
        self.whichDataErrorX = self.wgt_graphDataErrorX.GetValue()
        self.whichDataErrorY = self.wgt_graphDataErrorY.GetValue()

        self.dataErrorY = self.data[self.whichSheet][self.whichDataErrorY]

        if self.whichDataErrorX == 'None':
            self.dataErrorX = None
        else:
            self.dataErrorX = self.data[self.whichSheet][self.whichDataErrorX]

        event.Skip()

    def graphDataErrorX(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.whichSheet = self.wgt_graphDataSheet.GetValue()
        self.whichDataErrorX = self.wgt_graphDataErrorX.GetValue()
        self.whichDataErrorY = self.wgt_graphDataErrorY.GetValue()
       
        self.dataErrorX = self.data[self.whichSheet][self.whichDataErrorX]

        if self.whichDataErrorY == 'None':
            self.dataErrorY = None
        else:
            self.dataErrorY = self.data[self.whichSheet][self.whichDataErrorY]

        event.Skip()

    def graphDataErrorColor(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.checkWhat = self.wgt_graphDataCheckListPlot.GetCheckedStrings()
        dataErrorAlpha = (self.wgt_graphDataErrorAlpha.GetValue())/100

        try:
            dataErrorLineWidth = float(self.wgt_graphDataErrorLineWidth.GetValue())
            dataErrorCapSize = float(self.wgt_graphDataErrorCapSize.GetValue())
            dataErrorBarAbove = float(self.wgt_graphDataErrorBarAbove.GetValue())

        except:
            pass

        try:
            for l in self.checkWhat:
                self.plotErrorList[self.whichPlotNo][l].remove()
        except:
            pass

        dlg = wx.ColourDialog(self)
 
        # Ensure the full colour dialog is displayed, 
        # not the abbreviated version.
        dlg.GetColourData().SetChooseFull(True)
        
        if dlg.ShowModal() == wx.ID_OK:
            data = dlg.GetColourData()
            hexcolorError = '#%02x%02x%02x' % data.GetColour()[:-1]

            for l in self.checkWhat:
                self.plotErrorColorList[self.whichPlotNo][l] = hexcolorError
                print (self.plotErrorColorList[self.whichPlotNo][l])

            r = data.GetColour()[0]
            b = data.GetColour()[1]
            g = data.GetColour()[2]

            try:
                for l in self.checkWhat:
                    xydata = self.plotList[self.whichPlotNo][l].get_xydata()
                    xf = xydata[:,0]; yf = xydata[:,1]
                                        
                    self.plotErrorList[self.whichPlotNo][l] = self.ax[self.whichPlotNo].errorbar(xf,yf,\
                        yerr = self.dataErrorY, xerr = self.dataErrorX,\
                        ecolor = self.plotErrorColorList[self.whichPlotNo][l],\
                        elinewidth = dataErrorLineWidth, capsize = dataErrorCapSize,\
                        capthick = dataErrorBarAbove, alpha = dataErrorAlpha, \
                        linestyle = 'None', marker='None')
                    print ('self.plotErrorList[self.whichPlotNo] =\n', self.plotErrorList[self.whichPlotNo])
                    print ('self.plotErrorList[self.whichPlotNo][l] =\n', self.plotErrorList[self.whichPlotNo][l])
                    print ('self.plotErrorList[self.whichPlotNo][l]0 =\n', self.plotErrorList[self.whichPlotNo][l][0])
                    print ('self.plotErrorList[self.whichPlotNo][l]1 =\n', self.plotErrorList[self.whichPlotNo][l][1])
                    print ('self.plotErrorList[self.whichPlotNo][l]2 =\n', self.plotErrorList[self.whichPlotNo][l][2])
            except:
                pass

            self.ax[self.whichPlotNo].legend()

            self.canvas.draw()
            self.canvas.Refresh()

        event.Skip()


    def graphDataErrorLineWidth(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.checkWhat = self.wgt_graphDataCheckListPlot.GetCheckedStrings()
        dataErrorAlpha = (self.wgt_graphDataErrorAlpha.GetValue())/100

        try:
            dataErrorLineWidth = float(self.wgt_graphDataErrorLineWidth.GetValue())
            dataErrorCapSize = float(self.wgt_graphDataErrorCapSize.GetValue())
            dataErrorBarAbove = float(self.wgt_graphDataErrorBarAbove.GetValue())
        except:
            pass

        try:
            for l in self.checkWhat:
                self.plotErrorList[self.whichPlotNo][l].remove()
        except:
            pass

        try:
            for l in self.checkWhat:
                
                xydata = self.plotList[self.whichPlotNo][l].get_xydata()
                xf = xydata[:,0]; yf = xydata[:,1]


                self.plotErrorList[self.whichPlotNo][l] = self.ax[self.whichPlotNo].errorbar(xf,yf,\
                    yerr = self.dataErrorY, xerr = self.dataErrorX,\
                    ecolor = self.plotErrorColorList[self.whichPlotNo][l],\
                    elinewidth = dataErrorLineWidth, capsize = dataErrorCapSize,\
                    capthick = dataErrorBarAbove, alpha = dataErrorAlpha, \
                    linestyle = 'None', marker='None')

        except:
            pass

        self.ax[self.whichPlotNo].legend()

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphDataErrorCapSize(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.checkWhat = self.wgt_graphDataCheckListPlot.GetCheckedStrings()
        dataErrorAlpha = (self.wgt_graphDataErrorAlpha.GetValue())/100

        try:
            dataErrorLineWidth = float(self.wgt_graphDataErrorLineWidth.GetValue())
            dataErrorCapSize = float(self.wgt_graphDataErrorCapSize.GetValue())
            dataErrorBarAbove = float(self.wgt_graphDataErrorBarAbove.GetValue())
        except:
            pass

        try:
            for l in self.checkWhat:
                self.plotErrorList[self.whichPlotNo][l].remove()
        except:
            pass

        try:
            for l in self.checkWhat:
                
                xydata = self.plotList[self.whichPlotNo][l].get_xydata()
                xf = xydata[:,0]; yf = xydata[:,1]

                self.plotErrorList[self.whichPlotNo][l] = self.ax[self.whichPlotNo].errorbar(xf,yf,\
                    yerr = self.dataErrorY, xerr = self.dataErrorX,\
                    ecolor = self.plotErrorColorList[self.whichPlotNo][l],\
                    elinewidth = dataErrorLineWidth, capsize = dataErrorCapSize,\
                    capthick = dataErrorBarAbove, alpha = dataErrorAlpha, \
                    linestyle = 'None', marker='None')

        except:
            pass

        self.ax[self.whichPlotNo].legend()

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphDataErrorBarAbove(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.checkWhat = self.wgt_graphDataCheckListPlot.GetCheckedStrings()
        dataErrorAlpha = (self.wgt_graphDataErrorAlpha.GetValue())/100

        try:
            dataErrorLineWidth = float(self.wgt_graphDataErrorLineWidth.GetValue())
            dataErrorCapSize = float(self.wgt_graphDataErrorCapSize.GetValue())
            dataErrorBarAbove = float(self.wgt_graphDataErrorBarAbove.GetValue())
        except:
            pass

        try:
            for l in self.checkWhat:
                self.plotErrorList[self.whichPlotNo][l].remove()
        except:
            pass

        try:
            for l in self.checkWhat:
                
                xydata = self.plotList[self.whichPlotNo][l].get_xydata()
                xf = xydata[:,0]; yf = xydata[:,1]

                self.plotErrorList[self.whichPlotNo][l] = self.ax[self.whichPlotNo].errorbar(xf,yf,\
                    yerr = self.dataErrorY, xerr = self.dataErrorX,\
                    ecolor = self.plotErrorColorList[self.whichPlotNo][l],\
                    elinewidth = dataErrorLineWidth, capsize = dataErrorCapSize,\
                    capthick = dataErrorBarAbove, alpha = dataErrorAlpha, \
                    linestyle = 'None', marker='None')

        except:
            pass

        self.ax[self.whichPlotNo].legend()

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphDataErrorAlpha(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.checkWhat = self.wgt_graphDataCheckListPlot.GetCheckedStrings()
        dataErrorAlpha = (self.wgt_graphDataErrorAlpha.GetValue())/100

        try:
            dataErrorLineWidth = float(self.wgt_graphDataErrorLineWidth.GetValue())
            dataErrorCapSize = float(self.wgt_graphDataErrorCapSize.GetValue())
            dataErrorBarAbove = float(self.wgt_graphDataErrorBarAbove.GetValue())
        except:
            pass

        try:
            for l in self.checkWhat:
                self.plotErrorList[self.whichPlotNo][l].remove()
        except:
            pass

        try:
            for l in self.checkWhat:
                
                xydata = self.plotList[self.whichPlotNo][l].get_xydata()
                xf = xydata[:,0]; yf = xydata[:,1]

                self.plotErrorList[self.whichPlotNo][l] = self.ax[self.whichPlotNo].errorbar(xf,yf,\
                    yerr = self.dataErrorY, xerr = self.dataErrorX,\
                    ecolor = self.plotErrorColorList[self.whichPlotNo][l],\
                    elinewidth = dataErrorLineWidth, capsize = dataErrorCapSize,\
                    capthick = dataErrorBarAbove, alpha = dataErrorAlpha, \
                    linestyle = 'None', marker='None')

        except:
            pass

        self.ax[self.whichPlotNo].legend()

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphLegendPlace(self, event):  # wxGlade: MyFramePlot.<event_handler>

        self.legendPlace = self.wgt_graphLegendPlace.GetValue()

        try:
            self.legend_dict['loc']=self.legendPlace
            self.legendFontColor = self.ax[self.whichPlotNo].legend(**self.legend_dict)

            for text in self.legendFontColor.get_texts():
                text.set_color(self.hexcolorlegendFont)

        except:
            pass

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphLegendShow(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.checkWhat = self.wgt_graphDataCheckListPlot.GetCheckedStrings()
        self.legendPlace = self.wgt_graphLegendPlace.GetValue()
        #self.legendSep = self.wgt_graphLegendSep.GetValue()
        #self.legendAnchor = self.wgt_graphLegendAnchor.GetValue()
        self.legendCol = int(self.wgt_graphLegendCol.GetValue())
        self.propFont = {'family':'sans-serif', 'style':'normal', 'weight':'normal', 'size': 10}
        self.legendShadow = self.wgt_graphLegendShadow.GetValue()

        print ('self.legendShadow :', self.legendShadow)

        self.hexcolorlegendFace = '#FFFFFF'
        self.hexcolorlegendEdge = '#000000'
        #self.hexcolorlegendFont = '#000000' # excluded

        self.legendFrameAlpha = (self.wgt_graphLegendFrameAlpha.GetValue())/100
        self.legendPadLabel = float(self.wgt_graphLegendPadLabel.GetValue())
        self.legendPadCol = float(self.wgt_graphLegendPadCol.GetValue())
        self.legendPadLength = float(self.wgt_graphLegendPadLength.GetValue())
        self.legendPadText = float(self.wgt_graphLegendPadText.GetValue())
        self.legendPadBorder = float(self.wgt_graphLegendPadBorder.GetValue())
        self.legendPadAxes = float(self.wgt_graphLegendPadAxes.GetValue())
        self.legendScale = float(self.wgt_graphLegendScale.GetValue())
        self.legendFlip = self.wgt_graphLegendFlip.GetValue()

        self.legendShow = self.wgt_graphLegendShow.GetValue()

        self.legend_dict=dict(loc=self.legendPlace, ncol=self.legendCol, prop=self.propFont,\
            shadow=self.legendShadow, facecolor=self.hexcolorlegendFace, edgecolor=self.hexcolorlegendEdge,\
            framealpha=self.legendFrameAlpha, labelspacing=self.legendPadLabel, \
            columnspacing=self.legendPadCol, handlelength=self.legendPadLength, \
            handletextpad=self.legendPadText, borderpad=self.legendPadBorder,\
            borderaxespad=self.legendPadAxes, markerscale=self.legendScale,\
            markerfirst=self.legendFlip)

        if self.legendShow == 1:
            try:
                for l in self.checkWhat:
                    legendText = self.plotLegendList[self.whichPlotNo][l]
                    self.plotList[self.whichPlotNo][l].set_label(legendText)
                for text in self.legendFontColor.get_texts():
                    text.set_color(self.hexcolorlegendFont)
            except:
                pass

            self.legendFontColor = self.ax[self.whichPlotNo].legend(**self.legend_dict)

        else:
            self.ax[self.whichPlotNo].get_legend().remove()

        for text in self.legendFontColor.get_texts():
            self.hexcolorlegendFont = text.get_color()
        
        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphLegendSep(self, event):  # wxGlade: MyFramePlot.<event_handler>

        legendSep = self.wgt_graphLegendSep.GetValue()

        if legendSep == 1:
            self.legendFontColor = self.ax[self.whichPlotNo].legend(**self.legend_dict)
            for text in self.legendFontColor.get_texts():
                text.set_color(self.hexcolorlegendFont)
            self.legendFontColor.set_draggable(state=1,use_blit=False, update='loc')

        else:
            self.legendFontColor = self.ax[self.whichPlotNo].legend(**self.legend_dict)
            for text in self.legendFontColor.get_texts():
                text.set_color(self.hexcolorlegendFont)

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphLegendAnchor(self, event):  # wxGlade: MyFramePlot.<event_handler>
        self.legendAnchor = self.wgt_graphLegendAnchor.GetValue()

        try:
            self.legendAnchor = self.legendAnchor.split(',')
            self.legendAnchor = tuple(float(i) for i in self.legendAnchor if i != '')
            self.ax[self.whichPlotNo].legend(**self.legend_dict)
        except:
            pass

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphLegendCol(self, event):  # wxGlade: MyFramePlot.<event_handler>
        
        try:
            self.legendCol = int(self.wgt_graphLegendCol.GetValue())
            self.legend_dict['ncol']=self.legendCol
        except:
            pass

        self.legendFontColor = self.ax[self.whichPlotNo].legend(**self.legend_dict)
        print ('Col 1 self.hexcolorlegendFont ',self.hexcolorlegendFont)
        for text in self.legendFontColor.get_texts():
            text.set_color(self.hexcolorlegendFont)

        print ('Col 2 self.hexcolorlegendFont ',self.hexcolorlegendFont)

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphLegendFont(self, event):  # wxGlade: MyFramePlot.<event_handler>

        dlgFont = wx.FontDialog(self,wx.FontData())
        if dlgFont.ShowModal() == wx.ID_OK:
            data = dlgFont.GetFontData()
            font = data.GetChosenFont()

            fontFace = font.GetFaceName() # Font name
            fontFeatures = font.GetNativeFontInfoDesc().replace(font.GetFaceName(),'').split()

            fontWeight = 'normal'
            fontStyle = 'normal'
            fontSize = 12

            if len(fontFeatures) == 3:
                fontWeight = fontFeatures[0].lower()
                fontStyle = fontFeatures[1].lower()
                fontSize = fontFeatures[-1]
            elif len(fontFeatures) == 2:
                fontSize = fontFeatures[-1]
                if fontFeatures[0] == 'Bold':
                    fontWeight = fontFeatures[0].lower()
                else:
                    fontStyle = fontFeatures[0].lower()
            else:
                fontSize = fontFeatures[-1]

        self.propFont = {'family':fontFace, 'style':fontStyle, 'weight':fontWeight,\
        'size': int(fontSize)}

        self.legend_dict['prop']=self.propFont

        self.legendFontColor = self.ax[self.whichPlotNo].legend(**self.legend_dict)
        for text in self.legendFontColor.get_texts():
            text.set_color(self.hexcolorlegendFont)

        self.canvas.draw()
        self.canvas.Refresh()


    def graphLegendShadow(self, event):  # wxGlade: MyFramePlot.<event_handler>

        self.legendShadow = self.wgt_graphLegendShadow.GetValue()
        self.legend_dict['shadow']=self.legendShadow

        self.legendFontColor = self.ax[self.whichPlotNo].legend(**self.legend_dict)
        for text in self.legendFontColor.get_texts():
            text.set_color(self.hexcolorlegendFont)

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphLegendFaceColor(self, event):  # wxGlade: MyFramePlot.<event_handler>

        dlg = wx.ColourDialog(self)
 
        # Ensure the full colour dialog is displayed, 
        # not the abbreviated version.
        dlg.GetColourData().SetChooseFull(True)
        
        if dlg.ShowModal() == wx.ID_OK:
            data = dlg.GetColourData()
            self.hexcolorlegendFace = '#%02x%02x%02x' % data.GetColour()[:-1]

            r = data.GetColour()[0]
            b = data.GetColour()[1]
            g = data.GetColour()[2]

        self.legend_dict['facecolor']=self.hexcolorlegendFace

        self.legendFontColor = self.ax[self.whichPlotNo].legend(**self.legend_dict)

        for text in self.legendFontColor.get_texts():
            text.set_color(self.hexcolorlegendFont)

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphLegendEdgeColor(self, event):  # wxGlade: MyFramePlot.<event_handler>
        dlg = wx.ColourDialog(self)
 
        # Ensure the full colour dialog is displayed, 
        # not the abbreviated version.
        dlg.GetColourData().SetChooseFull(True)
        
        if dlg.ShowModal() == wx.ID_OK:
            data = dlg.GetColourData()
            self.hexcolorlegendEdge = '#%02x%02x%02x' % data.GetColour()[:-1]

            r = data.GetColour()[0]
            b = data.GetColour()[1]
            g = data.GetColour()[2]

        self.legend_dict['edgecolor']=self.hexcolorlegendEdge

        self.legendFontColor = self.ax[self.whichPlotNo].legend(**self.legend_dict)

        for text in self.legendFontColor.get_texts():
            text.set_color(self.hexcolorlegendFont)

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphLegendFontColor(self, event):  # wxGlade: MyFramePlot.<event_handler>

        dlg = wx.ColourDialog(self)
 
        # Ensure the full colour dialog is displayed, 
        # not the abbreviated version.
        dlg.GetColourData().SetChooseFull(True)
        
        if dlg.ShowModal() == wx.ID_OK:
            data = dlg.GetColourData()
            self.hexcolorlegendFont = '#%02x%02x%02x' % data.GetColour()[:-1]

            r = data.GetColour()[0]
            b = data.GetColour()[1]
            g = data.GetColour()[2]

            self.legendFontColor = self.ax[self.whichPlotNo].legend(**self.legend_dict)#.set_draggable(state=1, use_blit=False, update='bbox')

        for text in self.legendFontColor.get_texts():
            print ('self.hexcolorlegendFont ',self.hexcolorlegendFont)
            text.set_color(self.hexcolorlegendFont)

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphLegendFrameAlpha(self, event):  # wxGlade: MyFramePlot.<event_handler>

        self.legendFrameAlpha = (self.wgt_graphLegendFrameAlpha.GetValue())/100

        self.legend_dict['framealpha']=self.legendFrameAlpha

        self.legendFontColor = self.ax[self.whichPlotNo].legend(**self.legend_dict)

        for text in self.legendFontColor.get_texts():
            text.set_color(self.hexcolorlegendFont)

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphLegendPadLabel(self, event):  # wxGlade: MyFramePlot.<event_handler>

        try:
            self.legendPadLabel = float(self.wgt_graphLegendPadLabel.GetValue())
        except:
            pass

        self.legend_dict['labelspacing']=self.legendPadLabel

        self.legendFontColor = self.ax[self.whichPlotNo].legend(**self.legend_dict)

        for text in self.legendFontColor.get_texts():
            text.set_color(self.hexcolorlegendFont)

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphLegendPadCol(self, event):  # wxGlade: MyFramePlot.<event_handler>

        try:
            self.legendPadCol = float(self.wgt_graphLegendPadCol.GetValue())
        except:
            pass

        self.legend_dict['columnspacing']=self.legendPadCol

        self.legendFontColor = self.ax[self.whichPlotNo].legend(**self.legend_dict)

        for text in self.legendFontColor.get_texts():
            text.set_color(self.hexcolorlegendFont)

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphLegendPadLength(self, event):  # wxGlade: MyFramePlot.<event_handler>

        try:
            self.legendPadLength = float(self.wgt_graphLegendPadLength.GetValue())
        except:
            pass

        self.legend_dict['handlelength']=self.legendPadLength

        self.legendFontColor = self.ax[self.whichPlotNo].legend(**self.legend_dict)

        for text in self.legendFontColor.get_texts():
            text.set_color(self.hexcolorlegendFont)

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphLegendPadText(self, event):  # wxGlade: MyFramePlot.<event_handler>

        try:
            self.legendPadText = float(self.wgt_graphLegendPadText.GetValue())
        except:
            pass

        self.legend_dict['handletextpad']=self.legendPadText

        self.legendFontColor = self.ax[self.whichPlotNo].legend(**self.legend_dict)

        for text in self.legendFontColor.get_texts():
            text.set_color(self.hexcolorlegendFont)

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphLegendPadBorder(self, event):  # wxGlade: MyFramePlot.<event_handler>

        try:
            self.legendPadBorder = float(self.wgt_graphLegendPadBorder.GetValue())
        except:
            pass

        self.legend_dict['borderpad']=self.legendPadBorder

        self.legendFontColor = self.ax[self.whichPlotNo].legend(**self.legend_dict)

        for text in self.legendFontColor.get_texts():
            text.set_color(self.hexcolorlegendFont)

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphLegendPadAxes(self, event):  # wxGlade: MyFramePlot.<event_handler>

        try:
            self.legendPadAxes = float(self.wgt_graphLegendPadAxes.GetValue())
        except:
            pass

        self.legend_dict['borderaxespad']=self.legendPadAxes

        self.legendFontColor = self.ax[self.whichPlotNo].legend(**self.legend_dict)

        for text in self.legendFontColor.get_texts():
            text.set_color(self.hexcolorlegendFont)

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphLegendScale(self, event):  # wxGlade: MyFramePlot.<event_handler>

        try:
            self.legendScale = float(self.wgt_graphLegendScale.GetValue())
        except:
            pass

        self.legend_dict['markerscale']=self.legendScale

        self.legendFontColor = self.ax[self.whichPlotNo].legend(**self.legend_dict)

        for text in self.legendFontColor.get_texts():
            text.set_color(self.hexcolorlegendFont)
   
        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

    def graphLegendFlip(self, event):  # wxGlade: MyFramePlot.<event_handler>

        try:
            self.legendFlip = self.wgt_graphLegendFlip.GetValue()
            print (legendFlip)
        except:
            pass

        self.legend_dict['markerfirst']=self.legendFlip
        
        self.legendFontColor = self.ax[self.whichPlotNo].legend(**self.legend_dict)

        for text in self.legendFontColor.get_texts():
            text.set_color(self.hexcolorlegendFont)

        self.canvas.draw()
        self.canvas.Refresh()

        event.Skip()

# end of class MyFramePlot

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFramePlot(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
